{
  "name": "Cards",
  "dashCaseName": "cards",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "empty",
      "description": "Displayed only when the list of items is empty.",
      "isDefault": false
    },
    {
      "name": "filter",
      "description": "Use this slot to add filtering controls to the component.",
      "isDefault": false
    },
    {
      "name": "header",
      "description": "Heading element of the table container. Use the [header component](/components/header/).",
      "isDefault": false
    },
    {
      "name": "pagination",
      "description": "Use this slot to add the [pagination component](/components/pagination/) to the component.",
      "isDefault": false
    },
    {
      "name": "preferences",
      "description": "Use this slot to add [collection preferences](/components/collection-preferences/) to the component.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "scrollToTop",
      "description": "When the sticky header is enabled, calling this function scrolls cards's\nscroll parent up to reveal the first card or row of cards.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "ariaLabels",
      "type": "CardsProps.AriaLabels<T>",
      "inlineType": {
        "name": "CardsProps.AriaLabels<T>",
        "type": "object",
        "properties": [
          {
            "name": "cardsLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "itemSelectionLabel",
            "type": "(data: CardsProps.SelectionState<T>, row: T) => string",
            "optional": false
          },
          {
            "name": "selectionGroupLabel",
            "type": "string",
            "optional": false
          }
        ]
      },
      "optional": true,
      "description": "Adds labels to the selection components (checkboxes and radio buttons) as follows:\n* `itemSelectionLabel` ((SelectionState, Item) => string) - Determines the label for an item.\n* `selectionGroupLabel` (string) - Specifies the label for the group selection control.\n* `cardsLabel` (string) - Provides alternative text for the cards list.\n                           By default the contents of the `header` are used.\n\nYou can use the first arguments of type `SelectionState` to access the current selection\nstate of the component (for example, the `selectedItems` list). The label function for individual\nitems also receives the corresponding  `Item` object. You can use the group label to\nadd a meaningful description to the whole selection.",
      "i18nTag": true
    },
    {
      "name": "cardDefinition",
      "type": "CardsProps.CardDefinition<T>",
      "inlineType": {
        "name": "CardsProps.CardDefinition<T>",
        "type": "object",
        "properties": [
          {
            "name": "header",
            "type": "((item: T) => React.ReactNode)",
            "optional": true
          },
          {
            "name": "sections",
            "type": "ReadonlyArray<CardsProps.SectionDefinition<T>>",
            "optional": true
          }
        ]
      },
      "optional": false,
      "description": "Defines what to display in each card. It has the following properties:\n* `header` ((item) => ReactNode) - Responsible for displaying the card header. You receive the current item as an argument.\n    Use `fontSize=\"inherit\"` on [link](/components/link/) components inside card header.\n* `sections` (array) - Responsible for displaying the card content. Cards can have many sections in their\n  body. Each entry in the array is responsible for displaying a section. An entry has the following properties:\n  * `id`: (string) - A unique identifier for the section. The property is used as a [keys](https://reactjs.org/docs/lists-and-keys.html#keys)\n source for React rendering, and to match entries in the `visibleSections` property (if it's defined).\n  * `header`: (ReactNode) - Responsible for displaying the section header.\n  * `content`: ((item) => ReactNode) - Responsible for displaying the section content. You receive the current item as an argument.\n  * `width`: (number) - Specifies the width of the card section in percent. Use this to display multiple sections in\n  the same row. The default value is 100%.\n\nAll of the above properties are optional."
    },
    {
      "name": "cardsPerRow",
      "type": "ReadonlyArray<CardsProps.CardsLayout>",
      "optional": true,
      "description": "Determines the number of cards per row for any interval of container width.\nIt's an array whose entries are objects containing the following:\n- `cards` (number) - Specifies the number of cards per row.\n- `minWidth` (number) - Specifies the minimum container width (in pixels) for which this configuration object should apply.\n\nFor example, with this configuration:\n```\n[{\n  cards: 1\n}, {\n  minWidth: 500,\n  cards: 2\n}, {\n  minWidth: 800,\n  cards: 3\n}]\n```\n\nthe cards component displays:\n* 1 card per row when the container width is below 500px.\n* 2 cards per row when the container width is between 500px and 799px.\n* 3 cards per row when the container width is 800px or wider.\n\nThe number of cards per row can't be greater than 20.\n\nDefault value:\n```\n[{\n  cards: 1\n}, {\n  minWidth: 768,\n  cards: 2\n}, {\n  minWidth: 992,\n  cards: 3\n}, {\n  minWidth: 1200,\n  cards: 4\n}, {\n  minWidth: 1400,\n  cards: 5\n}, {\n  minWidth: 1920,\n  cards: 6\n}]\n```",
      "defaultValue": "[]"
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "entireCardClickable",
      "type": "boolean",
      "optional": true,
      "description": "Activating this property makes the entire card clickable to select it.\nDon't use this property if the card has any other interactive elements."
    },
    {
      "name": "firstIndex",
      "type": "number",
      "optional": true,
      "description": "Use this property to inform screen readers which range of cards is currently displayed.\nIt specifies the index (1-based) of the first card.",
      "defaultValue": "1"
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "isItemDisabled",
      "type": "CardsProps.IsItemDisabled<T>",
      "inlineType": {
        "name": "CardsProps.IsItemDisabled<T>",
        "type": "function",
        "returnType": "boolean",
        "parameters": [
          {
            "name": "item",
            "type": "T"
          }
        ]
      },
      "optional": true,
      "description": "Determines which items are disabled. If an item is disabled, users can't select it."
    },
    {
      "name": "items",
      "type": "ReadonlyArray<T>",
      "optional": false,
      "description": "Specifies the items that serve as data source for a card.\n\nThe `cardDefinition` property handles the display of this data.",
      "defaultValue": "[]"
    },
    {
      "name": "loading",
      "type": "boolean",
      "optional": true,
      "description": "Renders the cards in a loading state. We recommend that you also set a `loadingText`."
    },
    {
      "name": "loadingText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display when in loading state."
    },
    {
      "name": "renderAriaLive",
      "type": "((data: CardsProps.LiveAnnouncement) => string)",
      "inlineType": {
        "name": "(data: CardsProps.LiveAnnouncement) => string",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "data",
            "type": "CardsProps.LiveAnnouncement"
          }
        ]
      },
      "optional": true,
      "description": "Use this function to announce page changes to screen reader users.\nThe function argument takes the following properties:\n* `firstIndex` (number) - The provided `firstIndex` property which defaults to 1 when not defined.\n* `lastIndex` (number) - The index of the last visible item of the table.\n* `totalItemsCount` (optional, number) - The provided `totalItemsCount` property."
    },
    {
      "name": "selectedItems",
      "type": "ReadonlyArray<T>",
      "optional": true,
      "description": "Specifies the list of selected items."
    },
    {
      "name": "selectionType",
      "type": "string",
      "inlineType": {
        "name": "CardsProps.SelectionType",
        "type": "union",
        "values": [
          "single",
          "multi"
        ]
      },
      "optional": true,
      "description": "Specifies the selection mode. It can be either `single` or `multi`."
    },
    {
      "name": "stickyHeader",
      "type": "boolean",
      "optional": true,
      "description": "If set to true, the cards header remains visible when the user scrolls down."
    },
    {
      "name": "stickyHeaderVerticalOffset",
      "type": "number",
      "optional": true,
      "description": "Optionally provide a vertical offset (in pixels) for the sticky header, for example if you\nneed to position the sticky header below other fixed position elements on the page."
    },
    {
      "name": "totalItemsCount",
      "type": "number",
      "optional": true,
      "description": "Use this property to inform screen readers how many cards there are.\nIt specifies the total number of cards.\nIf there is an unknown total number of cards, leave this property undefined."
    },
    {
      "name": "trackBy",
      "type": "CardsProps.TrackBy<T>",
      "inlineType": {
        "name": "CardsProps.TrackBy<T>",
        "type": "union",
        "values": [
          "string",
          "(item: T) => string"
        ]
      },
      "optional": true,
      "description": "Specifies the property inside items that uniquely identifies them.\nWhen it's set, it's used to provide [keys for React](https://reactjs.org/docs/lists-and-keys.html#keys)\nfor performance optimizations.\n\nIt's also used for connecting `items` and `selectedItems` values when they don't reference the same object."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "\"container\" | \"full-page\"",
        "type": "union",
        "values": [
          "container",
          "full-page"
        ]
      },
      "optional": true,
      "description": "Specify a cards variant with one of the following:\n* `container` - Use this variant to have the cards displayed as a container.\n* `full-page` – Use this variant when cards are the entire content of a page.",
      "defaultValue": "'container'",
      "visualRefreshTag": "`full-page` variant"
    },
    {
      "name": "visibleSections",
      "type": "ReadonlyArray<string>",
      "optional": true,
      "description": "Specifies an array containing the `id` of each visible section. If not set, all sections are displayed.\n\nUse it in conjunction with the visible content preference of the [collection preferences](/components/collection-preferences/) component.\n\nThe order of `id`s doesn't influence the order of display of sections, which is controlled by the `cardDefinition` property."
    }
  ],
  "events": [
    {
      "name": "onSelectionChange",
      "description": "Called when a user interaction causes a change in the list of selected items.\nThe event `detail` contains the current list of `selectedItems`.",
      "cancelable": false,
      "detailType": "CardsProps.SelectionChangeDetail<T>",
      "detailInlineType": {
        "name": "CardsProps.SelectionChangeDetail<T>",
        "type": "object",
        "properties": [
          {
            "name": "selectedItems",
            "type": "Array<T>",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "cards",
    "source": "cards.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/cards.js"
  }
}