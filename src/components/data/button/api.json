{
  "name": "Button",
  "dashCaseName": "button",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "children",
      "displayName": "text",
      "description": "Text displayed in the button element.",
      "isDefault": true
    },
    {
      "name": "iconSvg",
      "description": "Specifies the SVG of a custom icon.\n\nUse this property if you want your custom icon to inherit colors dictated by variant or hover states.\nWhen this property is set, the component will be decorated with `aria-hidden=\"true\"`. Ensure that the `svg` element:\n- has attribute `focusable=\"false\"`.\n- has `viewBox=\"0 0 16 16\"`.\n\nIf you set the `svg` element as the root node of the slot, the component will automatically\n- set `stroke=\"currentColor\"`, `fill=\"none\"`, and `vertical-align=\"top\"`.\n- set the stroke width based on the size of the icon.\n- set the width and height of the SVG element based on the size of the icon.\n\nIf you don't want these styles to be automatically set, wrap the `svg` element into a `span`.\nYou can still set the stroke to `currentColor` to inherit the color of the surrounding elements.\n\nIf you set both `iconUrl` and `iconSvg`, `iconSvg` will take precedence.\n\n*Note:* Remember to remove any additional elements (for example: `defs`) and related CSS classes from SVG files exported from design software.\nIn most cases, they aren't needed, as the `svg` element inherits styles from the icon component.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "focus",
      "description": "Focuses the underlying native button.",
      "returnType": "void",
      "parameters": [
        {
          "name": "options",
          "type": "FocusOptions"
        }
      ]
    }
  ],
  "properties": [
    {
      "name": "ariaControls",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-controls` to the button. Use when the button controls the contents or presence of an element."
    },
    {
      "name": "ariaDescribedby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-describedby` to the button."
    },
    {
      "name": "ariaExpanded",
      "type": "boolean",
      "optional": true,
      "description": "Adds aria-expanded to the button element. Use when the button controls an expandable element."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-label` to the button element. Use this to provide an accessible name for buttons\nthat don't have visible text, and to distinguish between multiple buttons with identical visible text.\nThe text will also be added to the `title` attribute of the button."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "disabled",
      "type": "boolean",
      "optional": true,
      "description": "Renders the button as disabled and prevents clicks.",
      "defaultValue": "false"
    },
    {
      "name": "disabledReason",
      "type": "string",
      "optional": true,
      "description": "Provides a reason why the button is disabled (only when `disabled` is `true`).\nIf provided, the button becomes focusable.\nApplicable for all button variants, except link."
    },
    {
      "name": "download",
      "type": "string | boolean",
      "inlineType": {
        "name": "string | boolean",
        "type": "union",
        "values": [
          "string",
          "false",
          "true"
        ]
      },
      "optional": true,
      "description": "Specifies whether the linked URL, when selected, will prompt the user to download instead of navigate.\nYou can specify a string value that will be suggested as the name of the downloaded file.\nThis property only applies when an `href` is provided."
    },
    {
      "name": "external",
      "type": "boolean",
      "optional": true,
      "description": "Adds an external icon after the button label text.\nIf an href is provided, it opens the link in a new tab.",
      "defaultValue": "false"
    },
    {
      "name": "form",
      "type": "string",
      "optional": true,
      "description": "The id of the <form> element to associate with the button. The value of this attribute must be the id of a <form> in the same document.\nUse when a button is not the descendant of a form element, such as when used in a modal."
    },
    {
      "name": "formAction",
      "type": "string",
      "inlineType": {
        "name": "ButtonProps.FormAction",
        "type": "union",
        "values": [
          "none",
          "submit"
        ]
      },
      "optional": true,
      "description": "The form action that is performed by a button click.",
      "defaultValue": "'submit'"
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "optional": true,
      "description": "Sets the button width to be 100% of the parent container width. Button content is centered."
    },
    {
      "name": "href",
      "type": "string",
      "optional": true,
      "description": "Applies button styling to a link. Use this property if you need a link styled as a button (`variant=link`).\nFor example, if you have a 'help' button that links to a documentation page."
    },
    {
      "name": "i18nStrings",
      "type": "ButtonProps.I18nStrings",
      "inlineType": {
        "name": "ButtonProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "externalIconAriaLabel",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component. The object should contain:\n\n* `externalIconAriaLabel` - (optional) Specifies the aria-label for the external icon when `external` is set to `true`.",
      "i18nTag": true
    },
    {
      "name": "iconAlign",
      "type": "string",
      "inlineType": {
        "name": "ButtonProps.IconAlign",
        "type": "union",
        "values": [
          "left",
          "right"
        ]
      },
      "optional": true,
      "description": "Specifies the alignment of the icon.",
      "defaultValue": "'left'"
    },
    {
      "name": "iconAlt",
      "type": "string",
      "optional": true,
      "description": "Specifies alternate text for a custom icon. We recommend that you provide this for accessibility.\nThis property is ignored if you use a predefined icon or if you set your custom icon using the `iconSvg` slot."
    },
    {
      "name": "iconName",
      "type": "string",
      "inlineType": {
        "name": "IconProps.Name",
        "type": "union",
        "values": [
          "search",
          "map",
          "filter",
          "key",
          "file",
          "pause",
          "play",
          "remove",
          "copy",
          "menu",
          "script",
          "close",
          "status-pending",
          "refresh",
          "external",
          "group",
          "calendar",
          "ellipsis",
          "zoom-in",
          "zoom-out",
          "download",
          "security",
          "edit",
          "add-plus",
          "anchor-link",
          "angle-left-double",
          "angle-left",
          "angle-right-double",
          "angle-right",
          "angle-up",
          "angle-down",
          "arrow-left",
          "arrow-right",
          "arrow-up",
          "arrow-down",
          "audio-full",
          "audio-half",
          "audio-off",
          "backward-10-seconds",
          "bug",
          "call",
          "caret-down-filled",
          "caret-down",
          "caret-left-filled",
          "caret-right-filled",
          "caret-up-filled",
          "caret-up",
          "check",
          "contact",
          "closed-caption",
          "closed-caption-unavailable",
          "command-prompt",
          "delete-marker",
          "drag-indicator",
          "envelope",
          "exit-full-screen",
          "expand",
          "face-happy",
          "face-happy-filled",
          "face-neutral",
          "face-neutral-filled",
          "face-sad",
          "face-sad-filled",
          "file-open",
          "flag",
          "folder-open",
          "folder",
          "forward-10-seconds",
          "full-screen",
          "gen-ai",
          "globe",
          "grid-view",
          "group-active",
          "heart",
          "heart-filled",
          "insert-row",
          "keyboard",
          "list-view",
          "location-pin",
          "lock-private",
          "microphone",
          "microphone-off",
          "mini-player",
          "multiscreen",
          "notification",
          "redo",
          "resize-area",
          "settings",
          "send",
          "share",
          "shrink",
          "star-filled",
          "star-half",
          "star",
          "status-in-progress",
          "status-info",
          "status-negative",
          "status-positive",
          "status-stopped",
          "status-warning",
          "subtract-minus",
          "suggestions",
          "support",
          "thumbs-down-filled",
          "thumbs-down",
          "thumbs-up-filled",
          "thumbs-up",
          "ticket",
          "transcript",
          "treeview-collapse",
          "treeview-expand",
          "undo",
          "unlocked",
          "upload-download",
          "upload",
          "user-profile-active",
          "user-profile",
          "video-off",
          "video-on",
          "video-unavailable",
          "video-camera-off",
          "video-camera-on",
          "video-camera-unavailable",
          "view-full",
          "view-horizontal",
          "view-vertical",
          "zoom-to-fit"
        ]
      },
      "optional": true,
      "description": "Displays an icon next to the text. You can use the `iconAlign` property to position the icon."
    },
    {
      "name": "iconUrl",
      "type": "string",
      "optional": true,
      "description": "Specifies the URL of a custom icon. Use this property if the icon you want isn't available.\n\nIf you set both `iconUrl` and `iconSvg`, `iconSvg` will take precedence."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "loading",
      "type": "boolean",
      "optional": true,
      "description": "Renders the button as being in a loading state. It takes precedence over the `disabled` if both are set to `true`.\nIt prevents users from clicking the button, but it can still be focused.",
      "defaultValue": "false"
    },
    {
      "name": "loadingText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text that screen reader announces when the button is in a loading state."
    },
    {
      "name": "rel",
      "type": "string",
      "optional": true,
      "description": "Adds a `rel` attribute to the link. By default, the component sets the `rel` attribute to \"noopener noreferrer\" when `target` is `\"_blank\"`.\nIf the `rel` property is provided, it overrides the default behavior."
    },
    {
      "name": "target",
      "type": "string",
      "optional": true,
      "description": "Specifies where to open the linked URL (for example, to open in a new browser window or tab use `_blank`).\nThis property only applies when an `href` is provided."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "ButtonProps.Variant",
        "type": "union",
        "values": [
          "link",
          "normal",
          "icon",
          "primary",
          "inline-icon",
          "inline-link"
        ]
      },
      "optional": true,
      "description": "Determines the general styling of the button as follows:\n* `primary` for primary buttons.\n* `normal` for secondary buttons.\n* `link` for tertiary buttons.\n* `icon` to display an icon only (no text).\n* `inline-icon` to display an icon-only (no text) button within a text context.\n* `inline-link` to display a tertiary button with no outer padding.",
      "defaultValue": "'normal'"
    },
    {
      "name": "wrapText",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the `text` content wraps. If you set it to `false`, it prevents the text from wrapping.",
      "defaultValue": "true"
    }
  ],
  "events": [
    {
      "name": "onClick",
      "description": "Called when the user clicks on the button and the button is not disabled or in loading state.",
      "cancelable": true,
      "detailType": "ClickDetail",
      "detailInlineType": {
        "name": "ClickDetail",
        "type": "object",
        "properties": [
          {
            "name": "altKey",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "button",
            "type": "number",
            "optional": false
          },
          {
            "name": "ctrlKey",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "metaKey",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "shiftKey",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onFollow",
      "description": "Called when the user clicks on the button with the left mouse button without pressing\nmodifier keys (that is, CTRL, ALT, SHIFT, META), and the button has an `href` set.",
      "cancelable": true,
      "detailType": "BaseNavigationDetail",
      "detailInlineType": {
        "name": "BaseNavigationDetail",
        "type": "object",
        "properties": [
          {
            "name": "external",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "href",
            "type": "string",
            "optional": true
          },
          {
            "name": "target",
            "type": "string",
            "optional": true
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "button",
    "source": "button.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/button.js"
  }
}