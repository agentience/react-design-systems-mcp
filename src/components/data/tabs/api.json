{
  "name": "Tabs",
  "dashCaseName": "tabs",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "actions",
      "description": "Actions for the tabs header, displayed next to the list of tabs.\nUse this to add a button or button dropdown that performs actions on the\nentire tab list. We recommend a maximum of one interactive element to\nminimize the number of keyboard tab stops between the tab list and content.",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "activeTabId",
      "type": "string",
      "optional": true,
      "description": "The `id` of the currently active tab.\n* If you don't set this property, the component activates the first tab and switches tabs automatically when a tab header is clicked (that is, uncontrolled behavior).\n* If you explicitly set this property, you must set define an `onChange` handler to update the property when a tab header is clicked (that is, controlled behavior)."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Provides an `aria-label` to the tab container.\nDon't use `ariaLabel` and `ariaLabelledby` at the same time."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Sets the `aria-labelledby` property on the tab container.\nIf there's a visible label element that you can reference, use this instead of `ariaLabel`.\nDon't use `ariaLabel` and `ariaLabelledby` at the same time."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "disableContentPaddings",
      "type": "boolean",
      "optional": true,
      "description": "Determines whether the tab content has padding. If `true`, removes the default padding from the tab content area.",
      "defaultValue": "false"
    },
    {
      "name": "fitHeight",
      "type": "boolean",
      "optional": true,
      "description": "Enabling this property makes the tab content fit to the available height.\nIf the tab content is too short, it will stretch. If the tab content is too long, a vertical scrollbar will be shown."
    },
    {
      "name": "i18nStrings",
      "type": "TabsProps.I18nStrings",
      "inlineType": {
        "name": "TabsProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "scrollLeftAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "scrollRightAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "tabsWithActionsAriaRoleDescription",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "keyboardActivationMode",
      "type": "string",
      "inlineType": {
        "name": "\"manual\" | \"automatic\"",
        "type": "union",
        "values": [
          "manual",
          "automatic"
        ]
      },
      "optional": true,
      "description": "Determines how the active tab is switched when navigating using\nthe keyboard. The options are:\n- 'automatic' (default): the active tab is switched using the arrow keys.\n- 'manual': a tab must be explicitly activated using the enter/space key.\nWe recommend using 'automatic' in most situations to provide consistent\nand quick switching between tabs. Use 'manual' only if there is a specific\nneed to introduce friction to the switching of tabs.",
      "defaultValue": "'automatic'"
    },
    {
      "name": "tabs",
      "type": "ReadonlyArray<TabsProps.Tab>",
      "optional": false,
      "description": "Specifies the tabs to display. Each tab object has the following properties:\n\n- `id` (string) - The tab identifier. This value needs to be passed to the Tabs component as `activeTabId` to select this tab.\n- `label` (ReactNode) - Tab label shown in the UI.\n- `content` (ReactNode) - (Optional) Tab content to render in the container.\n- `disabled` (boolean) - (Optional) Specifies if this tab is disabled.\n- `disabledReason` (string) - (Optional) Displays tooltip near the tab when disabled. Use to provide additional context.\n- `dismissible` (boolean) - (Optional) Determines whether the tab includes a dismiss icon button. By default, the dismiss button is not included.\n- `dismissLabel` (boolean) - (Optional) Specifies an aria-label for the dismiss icon button.\n- `dismissDisabled` (boolean) - (Optional) Determines whether the dismiss button is disabled.\n- `action` (ReactNode) - (Optional) Action for the tab, rendered next to its corresponding label.\n   Although it is technically possible to insert any content, our UX guidelines only allow you to add\n   an icon button or icon button dropdown.\n- `onDismiss` (ButtonProps['onClick']) - (Optional) Called when a user clicks on the dismiss button.\n- `href` (string) - (Optional) You can use this parameter to change the default `href` of the internal tab anchor. The\n   `click` event default behavior is prevented, unless the user clicks the tab with a key modifier (that is, CTRL,\n   ALT, SHIFT, META). This enables the user to open new browser tabs with an initially selected component tab,\n   if your application routing can handle such deep links. You can manually update routing on the current page\n   using the `activeTabHref` property of the `change` event's detail.\n- `contentRenderStrategy` (string) - (Optional) Determines when tab content is rendered:\n  - `'active'`: (Default) Only render content when the tab is active.\n  - `'eager'`: Always render tab content (hidden when the tab is not active).\n  - `'lazy'`: Like 'eager', but content is only rendered after the tab is first activated."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "TabsProps.Variant",
        "type": "union",
        "values": [
          "default",
          "container",
          "stacked"
        ]
      },
      "optional": true,
      "description": "The possible visual variants of tabs are the following:\n* `default` - Use in any context.\n* `container` - Use this variant to have the tabs displayed within a container header.\n* `stacked` - Use this variant directly adjacent to other stacked containers (such as a container, table).",
      "defaultValue": "'default'",
      "visualRefreshTag": "`stacked` variant"
    }
  ],
  "events": [
    {
      "name": "onChange",
      "description": "Called whenever the user selects a different tab.\nThe event's `detail` contains the new `activeTabId`.",
      "cancelable": false,
      "detailType": "TabsProps.ChangeDetail",
      "detailInlineType": {
        "name": "TabsProps.ChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "activeTabHref",
            "type": "string",
            "optional": true
          },
          {
            "name": "activeTabId",
            "type": "string",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "tabs",
    "source": "tabs.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/tabs.js"
  }
}