{
  "name": "Popover",
  "dashCaseName": "popover",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "children",
      "displayName": "trigger",
      "description": "Element that triggers the popover when selected by the user.",
      "isDefault": true
    },
    {
      "name": "content",
      "description": "Content of the popover.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "focus",
      "description": "Sets focus on the popover's trigger.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "dismissAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an `aria-label` to the dismiss button for accessibility.",
      "i18nTag": true
    },
    {
      "name": "dismissButton",
      "type": "boolean",
      "optional": true,
      "description": "Determines whether the dismiss button is shown in the popover body.",
      "defaultValue": "true"
    },
    {
      "name": "fixedWidth",
      "type": "boolean",
      "optional": true,
      "description": "Expands the popover body to its maximum width regardless of content.\nFor example, use it when you need to place a column layout in the popover content.",
      "defaultValue": "false"
    },
    {
      "name": "header",
      "type": "string",
      "optional": true,
      "description": "Specifies optional header text for the popover."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "position",
      "type": "string",
      "inlineType": {
        "name": "PopoverProps.Position",
        "type": "union",
        "values": [
          "left",
          "top",
          "bottom",
          "right"
        ]
      },
      "optional": true,
      "description": "Determines where the popover is displayed when opened, relative to the trigger.\nIf the popover doesn't have enough space to open in this direction, it\nautomatically chooses a better direction based on available space.",
      "defaultValue": "'right'"
    },
    {
      "name": "renderWithPortal",
      "type": "boolean",
      "optional": true,
      "description": "By default, the popover is constrained to fit inside its parent\n[stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context).\nEnabling this property will allow the popover to be rendered in the root stack context using\n[React Portals](https://reactjs.org/docs/portals.html).\nEnable this setting if you need the popover to ignore its parent stacking context, such as in side navigation.\n\nNote: Using popover rendered with portal within a Modal is not supported.",
      "defaultValue": "false"
    },
    {
      "name": "size",
      "type": "string",
      "inlineType": {
        "name": "PopoverProps.Size",
        "type": "union",
        "values": [
          "small",
          "medium",
          "large"
        ]
      },
      "optional": true,
      "description": "Determines the maximum width for the popover.",
      "defaultValue": "'medium'"
    },
    {
      "name": "triggerAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-label` to the text trigger button. Use this to provide an accessible name for triggers\nthat don't have visible text, and to distinguish between multiple triggers with identical visible text."
    },
    {
      "name": "triggerType",
      "type": "string",
      "inlineType": {
        "name": "PopoverProps.TriggerType",
        "type": "union",
        "values": [
          "custom",
          "text",
          "text-inline"
        ]
      },
      "optional": true,
      "description": "Specifies the type of content inside the trigger region. The following types are available:\n- `text` - Use for triggers containing inline components, like status indicator.\n- `text-inline` - Use for triggers containing plain text only.\n- `custom` - Use for the [button](/components/button/) component.",
      "defaultValue": "'text'"
    },
    {
      "name": "wrapTriggerText",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the text trigger content should wrap. If you set it to false, it prevents the text from\nwrapping and truncates it with an ellipsis.",
      "defaultValue": "true"
    }
  ],
  "events": [],
  "_meta": {
    "component": "popover",
    "source": "popover.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/popover.js"
  }
}