{
  "name": "RadioGroup",
  "dashCaseName": "radio-group",
  "releaseStatus": "stable",
  "regions": [],
  "functions": [
    {
      "name": "focus",
      "description": "Sets input focus onto the UI control.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "ariaControls",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-controls` attribute to the radio group.\nIf the radio group controls any secondary content (for example, another form field), use this to provide an ID referring to the secondary content."
    },
    {
      "name": "ariaDescribedby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-describedby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for each element that you want to use as a description\nand set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`)."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-label` to the group. If you are using this form element within a form field,\ndon't set this property because the form field component automatically sets the correct labels to make the component accessible."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-labelledby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for the element you want to use as label and set the property to that ID."
    },
    {
      "name": "ariaRequired",
      "type": "boolean",
      "optional": true,
      "description": "Adds `aria-required` to the group."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "controlId",
      "type": "string",
      "optional": true,
      "description": "Specifies the ID of the native form element. You can use it to relate\na label element's `for` attribute to this control.\n\nIt defaults to an automatically generated ID that\nis provided by its parent form field component.",
      "deprecatedTag": "Has no effect."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "items",
      "type": "ReadonlyArray<RadioGroupProps.RadioButtonDefinition>",
      "optional": true,
      "description": "Specifies an array of radio buttons to display. Each of these objects have the following properties:\n\n- `value` (string) - Sets the value of the radio button. Assigned to the radio group when a user selects the radio button.\n- `label` (ReactNode) - Specifies a label for the radio button.\n- `description` (ReactNode) - (Optional) Specifies descriptive text that appears below the label.\n- `disabled` (boolean) - (Optional) Determines whether the radio button is disabled, which prevents the user from selecting it.\n- `controlId` (string) - (Optional) Sets the ID of the internal input. You can use it to relate a label element's `for` attribute to this control.\n       In general it's not recommended to set this because the ID is automatically set by the radio group component."
    },
    {
      "name": "name",
      "type": "string",
      "optional": true,
      "description": "Specify a custom name for the radio buttons. If not provided, the radio group generates a random name."
    },
    {
      "name": "readOnly",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the whole group is read-only, which prevents the\nuser from modifying the value, but does not prevent the value from\nbeing included in a form submission. A read-only control is still focusable."
    },
    {
      "name": "value",
      "type": "string | null",
      "optional": false,
      "description": "Sets the value of the selected radio button.\nIf you want to clear the selection, use `null`."
    }
  ],
  "events": [
    {
      "name": "onChange",
      "description": "Called when the user selects a different radio button. The event `detail` contains the current `value`.",
      "cancelable": false,
      "detailType": "RadioGroupProps.ChangeDetail",
      "detailInlineType": {
        "name": "RadioGroupProps.ChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "value",
            "type": "string",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "radio-group",
    "source": "radio-group.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/radio-group.js"
  }
}