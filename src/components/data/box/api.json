{
  "name": "Box",
  "dashCaseName": "box",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "children",
      "displayName": "content",
      "description": "Content of the box.",
      "isDefault": true
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "color",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.Color",
        "type": "union",
        "values": [
          "inherit",
          "text-label",
          "text-body-secondary",
          "text-status-error",
          "text-status-success",
          "text-status-info",
          "text-status-inactive",
          "text-status-warning"
        ]
      },
      "optional": true,
      "description": "Overrides the text color. You can set it to the following values:\n\n- `inherit` - Inherits the color from the parent element. For example, use this to style content\n     in Flashbars and to style the `empty` and `noMatch` slots of the Table and Cards components.\n- `text-label` - Specifies the text color for non-form labels. For example, use it for the key in key/value pairs.\n- `text-body-secondary` - Specifies the color for secondary text.\n- `text-status-error` - Specifies the color for error text and icons.\n- `text-status-success` - Specifies the color for success text and icons.\n- `text-status-info` - Specifies the color for info text and icon.\n- `text-status-inactive` - Specifies the color for inactive and loading text and icons.\n- `text-status-warning` - Specifies the color for warning text and icons.\n\nNote: If you don't set it, the text color depends on the variant."
    },
    {
      "name": "display",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.Display",
        "type": "union",
        "values": [
          "inline",
          "none",
          "block",
          "inline-block"
        ]
      },
      "optional": true,
      "description": "Overrides the display of the element. You can set it to the following values:\n\n- `block` - Specifies block display.\n- `inline` - Specifies inline display.\n- `inline-block` - Specifies inline-block display.\n- `none` - Hides the box.\n\nNote: If you don't set it, the display depends on the variant."
    },
    {
      "name": "float",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.Float",
        "type": "union",
        "values": [
          "left",
          "right"
        ]
      },
      "optional": true,
      "description": "Defines the floating behavior. You can set it to `left` or `right`."
    },
    {
      "name": "fontSize",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.FontSize",
        "type": "union",
        "values": [
          "body-s",
          "body-m",
          "heading-xs",
          "heading-s",
          "heading-m",
          "heading-l",
          "heading-xl",
          "display-l"
        ]
      },
      "optional": true,
      "description": "Overrides the font size and line height. If not set, the font size and line height depend on the variant."
    },
    {
      "name": "fontWeight",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.FontWeight",
        "type": "union",
        "values": [
          "bold",
          "normal",
          "light",
          "heavy"
        ]
      },
      "optional": true,
      "description": "Overrides the font weight. If not set, the value depends on the variant.",
      "visualRefreshTag": "'heavy'"
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "margin",
      "type": "BoxProps.SpacingSize | BoxProps.Spacing",
      "inlineType": {
        "name": "BoxProps.SpacingSize | BoxProps.Spacing",
        "type": "union",
        "values": [
          "\"s\"",
          "\"m\"",
          "\"n\"",
          "\"xxxs\"",
          "\"xxs\"",
          "\"xs\"",
          "\"l\"",
          "\"xl\"",
          "\"xxl\"",
          "\"xxxl\"",
          "BoxProps.Spacing"
        ]
      },
      "optional": true,
      "description": "Adds margins to the element. It can be the following:\n\n- A single string with a size. This applies the same margin to all sides (that is, top, right, bottom, left).\n- An object specifying the size of the margin per side. The object has the following format:\n```\n{\n  top: \"size of top margin\",\n  right: \"size of right margin\",\n  bottom: \"size of bottom margin\",\n  left: \"size of left margin\",\n  horizontal: \"size of left and right margin\",\n  vertical: \"size of top and bottom margin\",\n}\n```\n\nThe size can be `n`, `xxxs`, `xxs`, `xs`, `s`, `m`, `l`, `xl`, `xxl`, `xxxl`, where `n` stands for none.\nSizes are automatically scaled down in compact mode.\n\n For example, `margin=\"s\"` adds a small margin to all sides.\n`margin={{ right: \"l\", bottom: \"s\" }}` adds a small margin to the bottom and a large margin to the right.",
      "defaultValue": "{}"
    },
    {
      "name": "padding",
      "type": "BoxProps.SpacingSize | BoxProps.Spacing",
      "inlineType": {
        "name": "BoxProps.SpacingSize | BoxProps.Spacing",
        "type": "union",
        "values": [
          "\"s\"",
          "\"m\"",
          "\"n\"",
          "\"xxxs\"",
          "\"xxs\"",
          "\"xs\"",
          "\"l\"",
          "\"xl\"",
          "\"xxl\"",
          "\"xxxl\"",
          "BoxProps.Spacing"
        ]
      },
      "optional": true,
      "description": "Adds padding to the element. It can be the following:\n\n- A single string with a size. This applies the same padding to all sides (that is, top, right, bottom, left).\n- An object specifying the size of padding per side. The object has the following format:\n```\n{\n  top: \"size of top padding\",\n  right: \"size of right padding\",\n  bottom: \"size of bottom padding\",\n  left: \"size of left padding\",\n  horizontal: \"size of left and right padding\",\n  vertical: \"size of top and bottom padding\",\n}\n```\n\nThe size can be `n`, `xxxs`, `xxs`, `xs`, `s`, `m`, `l`, `xl`, `xxl`, `xxxl`, where `n` stands for none.\nSizes are automatically scaled down in compact mode.\n\n For example, `padding=\"s\"` adds small padding to all sides.\n`padding={{ right: \"l\", bottom: \"s\" }}` adds small padding to the bottom and large padding to the right.",
      "defaultValue": "{}"
    },
    {
      "name": "tagOverride",
      "type": "string",
      "optional": true,
      "description": "Overrides the default HTML tag provided by the variant."
    },
    {
      "name": "textAlign",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.TextAlign",
        "type": "union",
        "values": [
          "center",
          "left",
          "right"
        ]
      },
      "optional": true,
      "description": "Defines the text alignment within the element. You can set it to `left`, `center`, or `right`."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "BoxProps.Variant",
        "type": "union",
        "values": [
          "small",
          "code",
          "div",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "p",
          "pre",
          "samp",
          "span",
          "strong",
          "awsui-value-large",
          "awsui-key-label",
          "awsui-gen-ai-label"
        ]
      },
      "optional": true,
      "description": "Defines the style of element to display.\n\n- If you set it to `'div'`, `'span'`, `'h1'`, `'h2'`, `'h3'`, `'h4'`, `'h5'`, `'p'`, `'strong'`, `'small'`, `'code'`, `'pre'`, or `'samp'`, the variant is also used as the HTML tag name.\n- If you set it to `awsui-key-label`, the component will render a `div`,\n  styled for use as a key label in key-value pairs.\n- If you set it to `awsui-gen-ai-label`, the component will render a `div`,\n  styled for use as a label indicating that content is produced by generative AI.\n- If you set it to `awsui-value-large`, the component will render a `span`,\n  styled using \"Display large light\" typography.\n\nOverride the HTML tag by using property `tagOverride`.",
      "defaultValue": "'div'"
    }
  ],
  "events": [],
  "_meta": {
    "component": "box",
    "source": "box.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/box.js"
  }
}