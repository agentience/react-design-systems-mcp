{
  "name": "Table",
  "dashCaseName": "table",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "empty",
      "description": "Displayed when the `items` property is an empty array. Use it to render an empty or no-match state.",
      "isDefault": false
    },
    {
      "name": "filter",
      "description": "Use this slot to add filtering controls to the table.",
      "isDefault": false
    },
    {
      "name": "footer",
      "description": "Footer of the table container.",
      "isDefault": false
    },
    {
      "name": "header",
      "description": "Heading element of the table container. Use the [header component](/components/header/).",
      "isDefault": false
    },
    {
      "name": "pagination",
      "description": "Use this slot to add the [pagination component](/components/pagination/) to the table.",
      "isDefault": false
    },
    {
      "name": "preferences",
      "description": "Use this slot to add [collection preferences](/components/collection-preferences/) to the table.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "cancelEdit",
      "description": "Dismiss an inline edit if currently active.",
      "returnType": "void",
      "parameters": []
    },
    {
      "name": "scrollToTop",
      "description": "When the sticky header is enabled and you call this function, the table\nscroll parent scrolls to reveal the first row of the table.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "analyticsMetadata",
      "type": "TableProps.AnalyticsMetadata",
      "inlineType": {
        "name": "TableProps.AnalyticsMetadata",
        "type": "object",
        "properties": [
          {
            "name": "flowType",
            "type": "\"view-resource\"",
            "optional": true
          },
          {
            "name": "instanceIdentifier",
            "type": "string",
            "optional": true
          },
          {
            "name": "resourceType",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Specifies additional analytics-related metadata.\n* `instanceIdentifier` - A unique string that identifies this component instance in your application.\n* `flowType` - Identifies the type of flow represented by the component.\n* `resourceType` - Identifies the type of resource represented by the flow. **Note:** This API is currently experimental.",
      "analyticsTag": ""
    },
    {
      "name": "ariaLabels",
      "type": "TableProps.AriaLabels<T>",
      "inlineType": {
        "name": "TableProps.AriaLabels<T>",
        "type": "object",
        "properties": [
          {
            "name": "activateEditLabel",
            "type": "((column: TableProps.ColumnDefinition<any>, item: T) => string)",
            "optional": true
          },
          {
            "name": "allItemsSelectionLabel",
            "type": "((data: TableProps.SelectionState<T>) => string)",
            "optional": true
          },
          {
            "name": "cancelEditLabel",
            "type": "((column: TableProps.ColumnDefinition<any>) => string)",
            "optional": true
          },
          {
            "name": "collapseButtonLabel",
            "type": "((item: T) => string)",
            "optional": true
          },
          {
            "name": "expandButtonLabel",
            "type": "((item: T) => string)",
            "optional": true
          },
          {
            "name": "itemSelectionLabel",
            "type": "((data: TableProps.SelectionState<T>, row: T) => string)",
            "optional": true
          },
          {
            "name": "resizerRoleDescription",
            "type": "string",
            "optional": true
          },
          {
            "name": "selectionGroupLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "submitEditLabel",
            "type": "((column: TableProps.ColumnDefinition<any>) => string)",
            "optional": true
          },
          {
            "name": "submittingEditText",
            "type": "((column: TableProps.ColumnDefinition<any>) => string)",
            "optional": true
          },
          {
            "name": "successfulEditLabel",
            "type": "((column: TableProps.ColumnDefinition<any>) => string)",
            "optional": true
          },
          {
            "name": "tableLabel",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Specifies alternative text for the selection components (checkboxes and radio buttons) as follows:\n* `itemSelectionLabel` ((SelectionState, Item) => string) - Specifies the alternative text for an item.\n* `allItemsSelectionLabel` ((SelectionState) => string) - Specifies the alternative text for multi-selection column header.\n* `selectionGroupLabel` (string) - Specifies the alternative text for the whole selection and single-selection column header.\n                                   It is prefixed to `itemSelectionLabel` and `allItemsSelectionLabel` when they are set.\nYou can use the first argument of type `SelectionState` to access the current selection\nstate of the component (for example, the `selectedItems` list). The `itemSelectionLabel` for individual\nitems also receives the corresponding  `Item` object. You can use the `selectionGroupLabel` to\nadd a meaningful description to the whole selection.\n* `tableLabel` (string) - Provides an alternative text for the table. If you use a header for this table, you may reuse the string\n                          to provide a caption-like description. For example, tableLabel=Instances will be announced as 'Instances table'.\n* `resizerRoleDescription` (string) - Provides role description for table column resizer buttons.\n* `activateEditLabel` (EditableColumnDefinition, Item) => string -\n                     Specifies an alternative text for the edit button in editable cells.\n* `cancelEditLabel` (EditableColumnDefinition) => string -\n                     Specifies an alternative text for the cancel button in editable cells.\n* `submitEditLabel` (EditableColumnDefinition) => string -\n                     Specifies an alternative text for the submit button in editable cells.\n* `successfulEditLabel` (EditableColumnDefinition) => string -\n                     Specifies an alternative text for the success icon in editable cells. This text is also announced to screen readers.\n* `submittingEditText` (EditableColumnDefinition) => string -\n                     Specifies a text that is announced to screen readers when a cell edit operation is submitted.\n* `expandButtonLabel` (Item) => string - Specifies an alternative text for row expand button.\n* `collapseButtonLabel` (Item) => string - Specifies an alternative text for row collapse button.",
      "i18nTag": true
    },
    {
      "name": "cellVerticalAlign",
      "type": "string",
      "inlineType": {
        "name": "\"top\" | \"middle\"",
        "type": "union",
        "values": [
          "top",
          "middle"
        ]
      },
      "optional": true,
      "description": "Determines the alignment of the content inside table cells.\nThis property affects all cells, including the ones in the selection column.\nTo target individual cells use `columnDefinitions.verticalAlign`, that takes precedence over `cellVerticalAlign`.",
      "defaultValue": "'middle'"
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "columnDefinitions",
      "type": "ReadonlyArray<TableProps.ColumnDefinition<T>>",
      "optional": false,
      "description": "The columns configuration object\n* `id` (string) - Specifies a unique column identifier. The property is used 1) as a [keys](https://reactjs.org/docs/lists-and-keys.html#keys) source for React rendering,\n  and 2) to match entries in the `columnDisplay` property, if defined.\n* `header` (ReactNode) - Determines the display of the column header.\n* `cell` ((item) => ReactNode) - Determines the display of a cell's content. You receive the current table row\n  item as an argument.\n* `width` (string | number) - Specifies the column width. Corresponds to the `width` css-property. If the width is not set,\n  the browser automatically adjusts the column width based on the content. When `resizableColumns` property is\n  set to `true`, additional constraints apply: 1) string values are not allowed, and 2) the last visible column always\n  fills the remaining space of the table so the specified width is ignored.\n* `minWidth` (string | number) - Specifies the minimum column width. Corresponds to the `min-width` css-property. When\n  `resizableColumns` property is set to `true`, additional constraints apply: 1) string values are not allowed,\n  and 2) the column can't resize below than the specified width (defaults to \"120px\"). We recommend that you set a minimum width\n  of at least 176px for columns that are editable.\n* `maxWidth` (string | number) - Specifies the maximum column width. Corresponds to the `max-width` css-property.\n  Note that when the `resizableColumns` property is set to `true` this property is ignored.\n* `ariaLabel` (LabelData => string) - An optional function that's called to provide an `aria-label` for the cell header.\n  It receives the current sorting state of this column, the direction it's sorted in, and an indication of\n  whether the sorting is disabled, as three Boolean values: `sorted`, `descending` and `disabled`.\n  We recommend that you use this for sortable columns to provide more meaningful labels based on the\n  current sorting direction.\n* `sortingField` (string) - Enables default column sorting. The value is used in [collection hooks](/get-started/dev-guides/collection-hooks/)\n  to reorder the items. Provide the name of the property within each item that should be used for sorting by this column.\n  For more complex sorting use `sortingComparator` instead.\n* `sortingComparator` ((T, T) => number) - Enables custom column sorting. The value is used in [collection hooks](/get-started/dev-guides/collection-hooks/)\n  to reorder the items. This property accepts a custom comparator that is used to compare two items.\n  The comparator must implement ascending ordering, and the output is inverted automatically in case of descending order.\n  If present, the `sortingField` property is ignored.\n* `editConfig` (EditConfig) - Enables inline editing in column when present. The value is used to configure the editing behavior.\n  * `editConfig.ariaLabel` (string) - Specifies a label for the edit control. Visually hidden but read by screen readers.\n  * `editConfig.errorIconAriaLabel` (string) - Specifies an ariaLabel for the error icon that is displayed when the validation fails.\n  * `editConfig.editIconAriaLabel` (string) - Specifies an alternate text for the edit icon used in column header.\n  * `editConfig.constraintText` (string) - Constraint text that is displayed below the edit control.\n  * `editConfig.disabledReason` ((item) => string | undefined) - A function that determines whether inline edit for certain items is disabled, and provides a reason why.\n           Return a string from the function to disable inline edit with a reason. Return `undefined` (or no return) from the function allow inline edit.\n  * `editConfig.validation` ((item, value) => string) - A function that allows you to validate the value of the edit control.\n           Return a string from the function to display an error message. Return `undefined` (or no return) from the function to indicate that the value is valid.\n  * `editConfig.editingCell` ((item, cellContext) => ReactNode) - Determines the display of a cell's content when inline editing is active on a cell;\n       You receive the current table row `item` and a `cellContext` object as arguments.\n       The `cellContext` object contains the following properties:\n    * `cellContext.currentValue` - State to keep track of a value in input fields while editing.\n    * `cellContext.setValue` - Function to update `currentValue`. This should be called when the value in input field changes.\n* `isRowHeader` (boolean) - Specifies that cells in this column should be used as row headers.\n* `hasDynamicContent` (boolean) - Specifies that cells in this column may have dynamic content. The contents will then be observed to update calculated column widths.\n   This may have a negative performance impact, so should be used only if necessary. It has no effect if `resizableColumns` is set to `true`.\n* `verticalAlign` ('middle' | 'top') - Determines the alignment of the content in the table cell."
    },
    {
      "name": "columnDisplay",
      "type": "ReadonlyArray<TableProps.ColumnDisplayProperties>",
      "optional": true,
      "description": "Specifies an array that represents the table columns in the order in which they will be displayed, together with their visibility.\n\nIf not set, all columns are displayed and the order is dictated by the `columnDefinitions` property.\n\nUse it in conjunction with the content display preference of the [collection preferences](/components/collection-preferences/) component."
    },
    {
      "name": "contentDensity",
      "type": "string",
      "inlineType": {
        "name": "\"compact\" | \"comfortable\"",
        "type": "union",
        "values": [
          "compact",
          "comfortable"
        ]
      },
      "optional": true,
      "description": "Toggles the content density of the table. Defaults to `'comfortable'`.",
      "defaultValue": "'comfortable'"
    },
    {
      "name": "enableKeyboardNavigation",
      "type": "boolean",
      "optional": true,
      "description": "Use this property to activate advanced keyboard navigation and focusing behaviors.\nWhen set to `true`, table cells become navigable with arrow keys, and the entire table has a single tab stop.\n\nBy default, the keyboard navigation is active for tables with expandable rows."
    },
    {
      "name": "expandableRows",
      "type": "TableProps.ExpandableRows<T>",
      "inlineType": {
        "name": "TableProps.ExpandableRows<T>",
        "type": "object",
        "properties": [
          {
            "name": "expandedItems",
            "type": "ReadonlyArray<T>",
            "optional": false
          },
          {
            "name": "getItemChildren",
            "type": "(item: T) => ReadonlyArray<T>",
            "optional": false
          },
          {
            "name": "isItemExpandable",
            "type": "(item: T) => boolean",
            "optional": false
          },
          {
            "name": "onExpandableItemToggle",
            "type": "TableProps.OnExpandableItemToggle<T>",
            "optional": false
          }
        ]
      },
      "optional": true,
      "description": "Use this property to define expandable table rows. The expandableRows configuration object consists of:\n* `getItemChildren` ((Item) => Item[]) - Use it to define nested data that are shown when an item gets expanded.\n* `isItemExpandable` ((Item) => boolean) - Use it for items that can be expanded to show nested data.\n* `expandedItems` (Item[]) - Use it to represent the expanded state of items.\n* `onExpandableItemToggle` (TableProps.OnExpandableItemToggle<T>) - Called when an item's expand toggle is clicked."
    },
    {
      "name": "firstIndex",
      "type": "number",
      "optional": true,
      "description": "Use this property to inform screen readers which range of items is currently displayed in the table.\nIt specifies the index (1-based) of the first item in the table.",
      "defaultValue": "1"
    },
    {
      "name": "getLoadingStatus",
      "type": "TableProps.GetLoadingStatus<T>",
      "inlineType": {
        "name": "TableProps.GetLoadingStatus<T>",
        "type": "function",
        "returnType": "TableProps.LoadingStatus",
        "parameters": [
          {
            "name": "item",
            "type": "T | null"
          }
        ]
      },
      "optional": true,
      "description": "A function that specifies the current status of loading more items. It is called once for the entire\ntable with `item=null` and then for each expanded item. The function result is one of the four possible states:\n* `pending` - Indicates that no request in progress, but more options may be loaded.\n* `loading` - Indicates that data fetching is in progress.\n* `finished` - Indicates that loading has finished and no more requests are expected.\n* `error` - Indicates that an error occurred during fetch."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "isItemDisabled",
      "type": "TableProps.IsItemDisabled<T>",
      "inlineType": {
        "name": "TableProps.IsItemDisabled<T>",
        "type": "function",
        "returnType": "boolean",
        "parameters": [
          {
            "name": "item",
            "type": "T"
          }
        ]
      },
      "optional": true,
      "description": "Determines whether a given item is disabled. If an item is disabled, the user can't select it."
    },
    {
      "name": "items",
      "type": "ReadonlyArray<T>",
      "optional": false,
      "description": "Specifies the data that's displayed in the table rows. Each item contains the data for one row. The display of a row is handled\nby the `cell` property of each column definition in the `columnDefinitions` property.",
      "defaultValue": "[]"
    },
    {
      "name": "loading",
      "type": "boolean",
      "optional": true,
      "description": "Renders the table in a loading state. We recommend that you also set a `loadingText`."
    },
    {
      "name": "loadingText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text that's displayed when the table is in a loading state."
    },
    {
      "name": "renderAriaLive",
      "type": "((data: TableProps.LiveAnnouncement) => string)",
      "inlineType": {
        "name": "(data: TableProps.LiveAnnouncement) => string",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "data",
            "type": "TableProps.LiveAnnouncement"
          }
        ]
      },
      "optional": true,
      "description": "Use this function to announce page changes to screen reader users.\nThe function argument takes the following properties:\n* `firstIndex` (number) - The provided `firstIndex` property which defaults to 1 when not defined.\n* `lastIndex` (number) - The index of the last visible item of the table.\n* `visibleItemsCount` (number) - The number of rendered table items.\n* `totalItemsCount` (optional, number) - The provided `totalItemsCount` property.\nImportant: in tables with expandable rows the `firstIndex`, `lastIndex`, and `totalItemsCount` reflect the top-level items only."
    },
    {
      "name": "renderLoaderEmpty",
      "type": "((detail: TableProps.RenderLoaderEmptyDetail<T>) => React.ReactNode)",
      "inlineType": {
        "name": "(detail: TableProps.RenderLoaderEmptyDetail<T>) => React.ReactNode",
        "type": "function",
        "returnType": "React.ReactNode",
        "parameters": [
          {
            "name": "detail",
            "type": "TableProps.RenderLoaderEmptyDetail<T>"
          }
        ]
      },
      "optional": true,
      "description": "Renders loader row content for empty row state: the loading status is \"finished\",\nand the row is expanded but has empty children array.\n\nThe empty loader state is only supported for expandable rows. Use `empty` slot if\nthe table items array is empty."
    },
    {
      "name": "renderLoaderError",
      "type": "((detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode)",
      "inlineType": {
        "name": "(detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode",
        "type": "function",
        "returnType": "React.ReactNode",
        "parameters": [
          {
            "name": "detail",
            "type": "TableProps.RenderLoaderDetail<T>"
          }
        ]
      },
      "optional": true,
      "description": "Renders loader row content for error state."
    },
    {
      "name": "renderLoaderLoading",
      "type": "((detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode)",
      "inlineType": {
        "name": "(detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode",
        "type": "function",
        "returnType": "React.ReactNode",
        "parameters": [
          {
            "name": "detail",
            "type": "TableProps.RenderLoaderDetail<T>"
          }
        ]
      },
      "optional": true,
      "description": "Renders loader row content for loading state."
    },
    {
      "name": "renderLoaderPending",
      "type": "((detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode)",
      "inlineType": {
        "name": "(detail: TableProps.RenderLoaderDetail<T>) => React.ReactNode",
        "type": "function",
        "returnType": "React.ReactNode",
        "parameters": [
          {
            "name": "detail",
            "type": "TableProps.RenderLoaderDetail<T>"
          }
        ]
      },
      "optional": true,
      "description": "Renders loader row content for pending state."
    },
    {
      "name": "resizableColumns",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if columns can be resized. If set to `true`, users can resize the columns in the table."
    },
    {
      "name": "selectedItems",
      "type": "ReadonlyArray<T>",
      "optional": true,
      "description": "List of selected items.",
      "defaultValue": "[]"
    },
    {
      "name": "selectionType",
      "type": "string",
      "inlineType": {
        "name": "TableProps.SelectionType",
        "type": "union",
        "values": [
          "single",
          "multi"
        ]
      },
      "optional": true,
      "description": "Specifies the selection type (`'single' | 'multi'`)."
    },
    {
      "name": "sortingColumn",
      "type": "TableProps.SortingColumn<T>",
      "inlineType": {
        "name": "TableProps.SortingColumn<T>",
        "type": "object",
        "properties": [
          {
            "name": "sortingComparator",
            "type": "((a: T, b: T) => number)",
            "optional": true
          },
          {
            "name": "sortingField",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Specifies the definition object of the currently sorted column. Make sure you pass an object that's\npresent in the `columnDefinitions` array."
    },
    {
      "name": "sortingDescending",
      "type": "boolean",
      "optional": true,
      "description": "Specifies whether to use a descending sort order."
    },
    {
      "name": "sortingDisabled",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if sorting buttons are disabled. For example, use this property\nto prevent the user from sorting before items are fully loaded."
    },
    {
      "name": "stickyColumns",
      "type": "TableProps.StickyColumns",
      "inlineType": {
        "name": "TableProps.StickyColumns",
        "type": "object",
        "properties": [
          {
            "name": "first",
            "type": "number",
            "optional": true
          },
          {
            "name": "last",
            "type": "number",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Specifies the number of first and/or last columns that should be sticky.\n\nIf the available scrollable space is less than a certain threshold, the feature is deactivated.\n\nUse it in conjunction with the sticky columns preference of the\n[collection preferences](/components/collection-preferences/) component."
    },
    {
      "name": "stickyHeader",
      "type": "boolean",
      "optional": true,
      "description": "If set to `true`, the table header remains visible when the user scrolls down.\n\nDo not use `stickyHeader` conditionally. Instead, keep its value constant during the component lifecycle."
    },
    {
      "name": "stickyHeaderVerticalOffset",
      "type": "number",
      "optional": true,
      "description": "Specifies a vertical offset (in pixels) for the sticky header. For example, use this if you\nneed to position the sticky header below other fixed position elements on the page."
    },
    {
      "name": "stripedRows",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if table rows alternate being shaded and unshaded. If set to `true`, every other row will be shaded."
    },
    {
      "name": "submitEdit",
      "type": "TableProps.SubmitEditFunction<T, unknown>",
      "inlineType": {
        "name": "TableProps.SubmitEditFunction<T, unknown>",
        "type": "function",
        "returnType": "void | Promise<void>",
        "parameters": [
          {
            "name": "item",
            "type": "ItemType"
          },
          {
            "name": "column",
            "type": "TableProps.ColumnDefinition<ItemType>"
          },
          {
            "name": "newValue",
            "type": "ValueType"
          }
        ]
      },
      "optional": true,
      "description": "Specifies a function that will be called after user submits an inline edit.\nReturn a promise to keep loading state while the submit request is in progress."
    },
    {
      "name": "totalItemsCount",
      "type": "number",
      "optional": true,
      "description": "Use this property to inform screen readers how many items there are in a table.\nIt specifies the total count of all items in a table.\nIf there is an unknown total of items in a table, leave this property undefined."
    },
    {
      "name": "trackBy",
      "type": "TableProps.TrackBy<T>",
      "inlineType": {
        "name": "TableProps.TrackBy<T>",
        "type": "union",
        "values": [
          "string",
          "(item: T) => string"
        ]
      },
      "optional": true,
      "description": "Specifies a property that uniquely identifies an individual item.\nWhen it's set, it's used to provide [keys for React](https://reactjs.org/docs/lists-and-keys.html#keys)\nfor performance optimizations.\n\nIt is also used in the following situations:\n- to connect `items` and `selectedItems` values when they reference different objects.\n- to connect `items` and `expandableRows.expandedItems` values when they reference different objects.\n- to attach successful edit state to the correct item if its row index changes after editing."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "TableProps.Variant",
        "type": "union",
        "values": [
          "container",
          "embedded",
          "stacked",
          "full-page",
          "borderless"
        ]
      },
      "optional": true,
      "description": "Specify a table variant with one of the following:\n* `container` - Use this variant to have the table displayed within a container.\n* `borderless` - Use this variant when the table should have no outer borders or shadow\n                 (such as in a dashboard item container).\n* `embedded` - Use this variant within a parent container (such as a modal, expandable\n               section, container or split panel).\n               **Deprecated**, replaced by `borderless` and `container`.\n* `stacked` - Use this variant adjacent to other stacked containers (such as a container,\n              table).\n* `full-page` – Use this variant when the table is the entire content of a page.",
      "defaultValue": "'container'",
      "visualRefreshTag": "`embedded`, `stacked`, and `full-page` variants"
    },
    {
      "name": "visibleColumns",
      "type": "ReadonlyArray<string>",
      "optional": true,
      "description": "Specifies an array containing the `id`s of visible columns. If not set, all columns are displayed.\n\nUse it in conjunction with the visible content preference of the [collection preferences](/components/collection-preferences/) component.\n\nThe order of ids doesn't influence the order in which columns are displayed - this is dictated by the `columnDefinitions` property.",
      "deprecatedTag": "Replaced by `columnDisplay`."
    },
    {
      "name": "wrapLines",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if text wraps within table cells. If set to `true`, long text within cells may wrap onto\nmultiple lines instead of being truncated with an ellipsis."
    }
  ],
  "events": [
    {
      "name": "onColumnWidthsChange",
      "description": "Fired when the user resizes a table column. The event detail contains an array of column widths in pixels,\nincluding the hidden via preferences columns. Use this event to persist the column widths.",
      "cancelable": false,
      "detailType": "TableProps.ColumnWidthsChangeDetail",
      "detailInlineType": {
        "name": "TableProps.ColumnWidthsChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "widths",
            "type": "ReadonlyArray<number>",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onEditCancel",
      "description": "Called whenever user cancels an inline edit. Use this function to reset any\nvalidation states, or show warning for unsaved changes.",
      "cancelable": true
    },
    {
      "name": "onRowClick",
      "description": "Note: This feature is provided for backwards compatibility. Its use is not recommended,\nand it may be deprecated in the future.\n\nCalled when the user clicked at a table row. The event detail contains the index of the\nclicked row and the row object itself. Use this event to define a row click behavior.",
      "cancelable": false,
      "detailType": "TableProps.OnRowClickDetail<T>",
      "detailInlineType": {
        "name": "TableProps.OnRowClickDetail<T>",
        "type": "object",
        "properties": [
          {
            "name": "item",
            "type": "T",
            "optional": false
          },
          {
            "name": "rowIndex",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onRowContextMenu",
      "description": "Note: This feature is provided for backwards compatibility. Its use is not recommended,\nand it may be deprecated in the future.\n\nCalled when the user clicked at a table row with the right mouse click. The event detail\ncontains the index of the clicked row and the row object itself. Use this event to override\nthe default browser context menu behavior.",
      "cancelable": true,
      "detailType": "TableProps.OnRowContextMenuDetail<T>",
      "detailInlineType": {
        "name": "TableProps.OnRowContextMenuDetail<T>",
        "type": "object",
        "properties": [
          {
            "name": "clientX",
            "type": "number",
            "optional": false
          },
          {
            "name": "clientY",
            "type": "number",
            "optional": false
          },
          {
            "name": "item",
            "type": "T",
            "optional": false
          },
          {
            "name": "rowIndex",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onSelectionChange",
      "description": "Fired when a user interaction triggers a change in the list of selected items.\nThe event `detail` contains the current list of `selectedItems`.",
      "cancelable": false,
      "detailType": "TableProps.SelectionChangeDetail<T>",
      "detailInlineType": {
        "name": "TableProps.SelectionChangeDetail<T>",
        "type": "object",
        "properties": [
          {
            "name": "selectedItems",
            "type": "Array<T>",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onSortingChange",
      "description": "Called when either the column to sort by or the direction of sorting changes upon user interaction.\nThe event detail contains the current sortingColumn and isDescending.",
      "cancelable": false,
      "detailType": "TableProps.SortingState<T>",
      "detailInlineType": {
        "name": "TableProps.SortingState<T>",
        "type": "object",
        "properties": [
          {
            "name": "isDescending",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "sortingColumn",
            "type": "TableProps.SortingColumn<T>",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "table",
    "source": "table.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/table.js"
  }
}