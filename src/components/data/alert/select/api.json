{
  "name": "Select",
  "dashCaseName": "select",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "empty",
      "description": "Displayed when there are no options to display.\nThis is only shown when `statusType` is set to `finished` or not set at all.",
      "isDefault": false
    },
    {
      "name": "noMatch",
      "description": "Displayed for `filteringType=\"auto\"` when there are no matches for the filtering.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "focus",
      "description": "Sets focus on the element without opening the dropdown or showing a visual focus indicator.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "ariaDescribedby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-describedby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for each element that you want to use as a description\nand set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`)."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-label` to the select element.\nUse this if you don't have a visible label for this control."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-labelledby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't using `inlineLabelText` and isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for the element you want to use as label and set the property to that ID."
    },
    {
      "name": "ariaRequired",
      "type": "boolean",
      "optional": true,
      "description": "Adds `aria-required` to the native input element."
    },
    {
      "name": "autoFocus",
      "type": "boolean",
      "optional": true,
      "description": "Automatically focuses the trigger when component is mounted."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "controlId",
      "type": "string",
      "optional": true,
      "description": "Specifies the ID for the trigger component. It uses an automatically generated ID by default."
    },
    {
      "name": "disabled",
      "type": "boolean",
      "optional": true,
      "description": "Determines whether the whole select component is disabled."
    },
    {
      "name": "errorIconAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Provides a text alternative for the error icon in the error message.",
      "i18nTag": true
    },
    {
      "name": "errorText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display when a data fetching error occurs. Make sure that you provide `recoveryText`."
    },
    {
      "name": "expandToViewport",
      "type": "boolean",
      "optional": true,
      "description": "By default, the dropdown height is constrained to fit inside the height of its next scrollable container element.\nEnabling this property will allow the dropdown to extend beyond that container by using fixed positioning and\n[React Portals](https://reactjs.org/docs/portals.html).\n\nSet this property if the dropdown would otherwise be constrained by a scrollable container,\nfor example inside table and split view layouts.\n\nWe recommend you use discretion, and don't enable this property unless necessary\nbecause fixed positioning results in a slight, visible lag when scrolling complex pages."
    },
    {
      "name": "filteringAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an `aria-label` on the built-in filtering input if filtering is enabled."
    },
    {
      "name": "filteringClearAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an `aria-label` to the clear button inside the search input.",
      "i18nTag": true
    },
    {
      "name": "filteringPlaceholder",
      "type": "string",
      "optional": true,
      "description": "Specifies the placeholder to display in the filtering input if filtering is enabled."
    },
    {
      "name": "filteringResultsText",
      "type": "((matchesCount: number, totalCount: number) => string)",
      "inlineType": {
        "name": "(matchesCount: number, totalCount: number) => string",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "matchesCount",
            "type": "number"
          },
          {
            "name": "totalCount",
            "type": "number"
          }
        ]
      },
      "optional": true,
      "description": "Specifies the text to display with the number of matches at the bottom of the dropdown menu while filtering."
    },
    {
      "name": "filteringType",
      "type": "string",
      "inlineType": {
        "name": "OptionsFilteringType",
        "type": "union",
        "values": [
          "auto",
          "none",
          "manual"
        ]
      },
      "optional": true,
      "description": "Determines how filtering is applied to the list of `options`:\n\n* `auto` - The component will automatically filter options based on user input.\n* `manual` - You will set up `onChange` or `onLoadItems` event listeners and filter options on your side or request\nthem from server.\n\nBy default the component will filter the provided `options` based on the value of the filtering input field.\nOnly options that have a `value`, `label`, `description` or `labelTag` that contains the input value as a substring\nare displayed in the list of options.\n\nIf you set this property to `manual`, this default filtering mechanism is disabled and all provided `options` are\ndisplayed in the dropdown list. In that case make sure that you use the `onChange` or `onLoadItems` events in order\nto set the `options` property to the options that are relevant for the user, given the filtering input value.\n\nNote: Manual filtering doesn't disable match highlighting.",
      "defaultValue": "'none'"
    },
    {
      "name": "finishedText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display at the bottom of the dropdown menu after pagination has reached the end."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "inlineLabelText",
      "type": "string",
      "optional": true,
      "description": "Adds a small label inline with the input for saving vertical space in the UI.\nFor use with collection select filters only."
    },
    {
      "name": "invalid",
      "type": "boolean",
      "optional": true,
      "description": "Overrides the invalidation state. Usually the invalid state\ncomes from the parent `FormField`component,\nhowever sometimes you need to override its\nstate when you have more than one input within a\nsingle form field."
    },
    {
      "name": "loadingText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display when in the loading state."
    },
    {
      "name": "name",
      "type": "string",
      "optional": true,
      "deprecatedTag": "Has no effect."
    },
    {
      "name": "options",
      "type": "SelectProps.Options",
      "optional": true,
      "description": "Specifies an array of options that are displayed to the user as a dropdown list.\nThe options can be grouped using `OptionGroup` objects.\n\n#### Option\n- `value` (string) - The returned value of the option when selected.\n\n#### OptionGroup\n- `value` (string) - Used to locate option group in test utils.\n- `options` (Option[]) - (Optional) The options under this group.\n\n#### Shared Option and OptionGroup properties\n- `label` (string) - (Optional) Option or group text displayed to the user.\n- `lang` (string) - (Optional) The language of the option or group, provided as a BCP 47 language tag.\n- `description` (string) - (Optional) Further information about the option or group that appears below the label.\n- `disabled` (boolean) - (Optional) Determines whether the option or group is disabled.\n- `disabledReason` (string) - (Optional) Displays tooltip near the item when disabled. Use to provide additional context.\n- `labelTag` (string) - (Optional) A label tag that provides additional guidance, shown next to the label.\n- `tags` [string[]] - (Optional) A list of tags giving further guidance about the option or group.\n- `filteringTags` [string[]] - (Optional) A list of additional tags used for automatic filtering.\n- `iconName` (string) - (Optional) Specifies the name of an [icon](/components/icon/) to display in the option or group.\n- `iconAlt` (string) - (Optional) Specifies alternate text for a custom icon, for use with `iconUrl`.\n- `iconUrl` (string) - (Optional) URL of a custom icon.\n- `iconSvg` (ReactNode) - (Optional) Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n\nNote: Only one level of option nesting is supported.\n\nIf you want to use the built-in filtering capabilities of this component, provide\na list of all valid options here and they will be automatically filtered based on the user's filtering input.\n\nAlternatively, you can listen to the `onChange` or `onLoadItems` event and set new options\non your own.",
      "defaultValue": "[]"
    },
    {
      "name": "placeholder",
      "type": "string",
      "optional": true,
      "description": "Specifies the hint text that's displayed in the field when no option has been selected."
    },
    {
      "name": "readOnly",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the control is read-only, which prevents the\nuser from both modifying the value and opening the dropdown. A read-only control is still focusable."
    },
    {
      "name": "recoveryText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text for the recovery button. The text is displayed next to the error text.\nUse the `onLoadItems` event to perform a recovery action (for example, retrying the request).",
      "i18nTag": true
    },
    {
      "name": "renderHighlightedAriaLive",
      "type": "SelectProps.ContainingOptionAndGroupString",
      "inlineType": {
        "name": "SelectProps.ContainingOptionAndGroupString",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "option",
            "type": "OptionDefinition"
          },
          {
            "name": "group",
            "type": "OptionGroup"
          }
        ]
      },
      "optional": true,
      "description": "Overrides the element that is announced to screen readers\nwhen the highlighted option changes. By default, this announces\nthe option's name and properties, and its selected state if\nthe `selectedLabel` property is defined.\nThe highlighted option is provided, and its group (if groups\nare used and it differs from the group of the previously highlighted option).\n\nFor more information, see the\n[accessibility guidelines](/components/select/?tabId=usage#accessibility-guidelines)."
    },
    {
      "name": "selectedAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Specifies the localized string that describes an option as being selected.\nThis is required to provide a good screen reader experience. For more information, see the\n[accessibility guidelines](/components/select/?tabId=usage#accessibility-guidelines).",
      "i18nTag": true
    },
    {
      "name": "selectedOption",
      "type": "OptionDefinition | null",
      "inlineType": {
        "name": "OptionDefinition",
        "type": "object",
        "properties": [
          {
            "name": "__labelPrefix",
            "type": "string",
            "optional": true
          },
          {
            "name": "description",
            "type": "string",
            "optional": true
          },
          {
            "name": "disabled",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "disabledReason",
            "type": "string",
            "optional": true
          },
          {
            "name": "filteringTags",
            "type": "ReadonlyArray<string>",
            "optional": true
          },
          {
            "name": "iconAlt",
            "type": "string",
            "optional": true
          },
          {
            "name": "iconName",
            "type": "IconProps.Name",
            "optional": true
          },
          {
            "name": "iconSvg",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "iconUrl",
            "type": "string",
            "optional": true
          },
          {
            "name": "label",
            "type": "string",
            "optional": true
          },
          {
            "name": "labelTag",
            "type": "string",
            "optional": true
          },
          {
            "name": "lang",
            "type": "string",
            "optional": true
          },
          {
            "name": "tags",
            "type": "ReadonlyArray<string>",
            "optional": true
          },
          {
            "name": "value",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": false,
      "description": "Specifies the currently selected option.\nIf you want to clear the selection, use `null`."
    },
    {
      "name": "statusType",
      "type": "string",
      "inlineType": {
        "name": "DropdownStatusProps.StatusType",
        "type": "union",
        "values": [
          "error",
          "finished",
          "loading",
          "pending"
        ]
      },
      "optional": true,
      "description": "Specifies the current status of loading more options.\n* `pending` - Indicates that no request in progress, but more options may be loaded.\n* `loading` - Indicates that data fetching is in progress.\n* `finished` - Indicates that pagination has finished and no more requests are expected.\n* `error` - Indicates that an error occurred during fetch. You should use `recoveryText` to enable the user to recover.",
      "defaultValue": "'finished'"
    },
    {
      "name": "triggerVariant",
      "type": "string",
      "inlineType": {
        "name": "SelectProps.TriggerVariant",
        "type": "union",
        "values": [
          "label",
          "option"
        ]
      },
      "optional": true,
      "description": "Defines the variant of the trigger. You can use a simple label or the entire option (`label | option`)",
      "defaultValue": "'label'"
    },
    {
      "name": "virtualScroll",
      "type": "boolean",
      "optional": true,
      "description": "If you have more than 500 options, enable this flag to apply a performance optimization\nthat makes the filtering experience smoother. We don't recommend enabling the feature if you\nhave less than 500 options, because the improvements to performance are offset by a\nvisible scrolling lag.\n\nWhen you set this flag to `true`, it removes options that are not currently in view from the DOM.\nIf your test accesses such options, you need to first scroll the options container\nto the correct offset, before performing any operations on them. Use the element returned\nby the `findOptionsContainer` test utility for this."
    },
    {
      "name": "warning",
      "type": "boolean",
      "optional": true,
      "description": "Overrides the warning state. Usually the warning state\ncomes from the parent `FormField`component,\nhowever sometimes you need to override its\nstate when you have more than one input within a\nsingle form field.\nWhen you use it, provide additional context with\ninformation on the input state, and associate it\nwith the input using `ariaDescribedby`."
    }
  ],
  "events": [
    {
      "name": "onBlur",
      "description": "Called when input focus is removed from the UI control.",
      "cancelable": false
    },
    {
      "name": "onChange",
      "description": "Called when the user selects an option.\nThe event `detail` contains the current `selectedOption`.",
      "cancelable": false,
      "detailType": "SelectProps.ChangeDetail",
      "detailInlineType": {
        "name": "SelectProps.ChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "selectedOption",
            "type": "OptionDefinition",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onFocus",
      "description": "Called when input focus is set onto the UI control.",
      "cancelable": false
    },
    {
      "name": "onLoadItems",
      "description": "Use this event to implement the asynchronous behavior for the component.\n\nThe event is called in the following situations:\n* The user scrolls to the end of the list of options, if `statusType` is set to `pending`.\n* The user clicks on the recovery button in the error state.\n* The user types inside the input field.\n* The user focuses the input field.\n\nThe detail object contains the following properties:\n* `filteringText` - The value that you need to use to fetch options.\n* `firstPage` - Indicates that you should fetch the first page of options that match the `filteringText`.\n* `samePage` - Indicates that you should fetch the same page that you have previously fetched (for example, when the user clicks on the recovery button).",
      "cancelable": false,
      "detailType": "OptionsLoadItemsDetail",
      "detailInlineType": {
        "name": "OptionsLoadItemsDetail",
        "type": "object",
        "properties": [
          {
            "name": "filteringText",
            "type": "string",
            "optional": false
          },
          {
            "name": "firstPage",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "samePage",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "select",
    "source": "select.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/select.js"
  }
}