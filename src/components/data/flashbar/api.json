{
  "name": "Flashbar",
  "dashCaseName": "flashbar",
  "releaseStatus": "stable",
  "regions": [],
  "functions": [],
  "properties": [
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "i18nStrings",
      "type": "FlashbarProps.I18nStrings",
      "inlineType": {
        "name": "FlashbarProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "ariaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "errorIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "infoIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "inProgressIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "notificationBarAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "notificationBarText",
            "type": "string",
            "optional": true
          },
          {
            "name": "successIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "warningIconAriaLabel",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component. The object should contain:\n\n* `ariaLabel` - Specifies the ARIA label for the list of notifications.\n\nIf `stackItems` is set to `true`, it should also contain:\n\n* `notificationBarAriaLabel` - (optional) Specifies the ARIA label for the notification bar\n* `notificationBarText` - (optional) Specifies the text shown in the notification bar\n* `errorIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `error`.\n* `warningIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `warning`.\n* `infoIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `info`.\n* `successIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `success`.\n* `inProgressIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `in-progress` or with `loading` set to `true`.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "items",
      "type": "ReadonlyArray<FlashbarProps.MessageDefinition>",
      "optional": false,
      "description": "Specifies flash messages that appear in the same order that they are listed.\nThe value is an array of flash message definition objects.\n\nA flash message object contains the following properties:\n* `header` (ReactNode) - Specifies the heading text.\n* `content` (ReactNode) - Specifies the primary text displayed in the flash element.\n* `type` (string) - Indicates the type of the message to be displayed. Allowed values are as follows: `success, error, warning, info`. The default is `info`.\n* `loading` (boolean) - Replaces the status icon with a spinner and forces the type to `info`.\n* `dismissible` (boolean) - Determines whether the component includes a close button icon. By default, the close button is not included.\nWhen a user clicks on this button the `onDismiss` handler is called.\n* `dismissLabel` (string) - Specifies an `aria-label` for to the dismiss icon button for improved accessibility.\n* `statusIconAriaLabel` (string) - Specifies an `aria-label` for to the status icon for improved accessibility.\nIf not provided, `i18nStrings.{type}IconAriaLabel` will be used as a fallback.\n* `ariaRole` (string) - For flash messages added after page load, specifies how this message is communicated to assistive\ntechnology. Use \"status\" for status updates or informational content. Use \"alert\" for important messages that need the\nuser's attention.\n* `action` (ReactNode) - Specifies an action for the flash message. Although it is technically possible to insert any content,\nour UX guidelines only allow you to add a button.\n* `buttonText` (string) - Specifies that an action button should be displayed, with the specified text.\nWhen a user clicks on this button the `onButtonClick` handler is called.\nIf the `action` property is set, this property is ignored. **Deprecated**, replaced by `action`.\n* `onButtonClick` (event => void) - Called when a user clicks on the action button. This is not called if you create a custom button\n  using the `action` property. **Deprecated**, replaced by `action`.\n* `id` (string) - Specifies a unique flash message identifier. This property is used in two ways:\n  1. As a [keys](https://reactjs.org/docs/lists-and-keys.html#keys) source for React rendering.\n  2. To identify which flash message will be removed from the DOM when it is dismissed, to animate it out.\n* `analyticsMetadata` (FlashbarProps.ItemAnalyticsMetadata) - (Optional) Specifies additional analytics-related metadata.\n  * `suppressFlowMetricEvents` - Prevent this item from generating events related to flow metrics.",
      "analyticsTag": ""
    },
    {
      "name": "stackItems",
      "type": "boolean",
      "optional": true,
      "description": "Specifies whether flash messages should be stacked."
    }
  ],
  "events": [],
  "_meta": {
    "component": "flashbar",
    "source": "flashbar.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/flashbar.js"
  }
}