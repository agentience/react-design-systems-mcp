{
  "name": "ButtonGroup",
  "dashCaseName": "button-group",
  "releaseStatus": "stable",
  "regions": [],
  "functions": [
    {
      "name": "focus",
      "description": "Focuses button group item by id.",
      "returnType": "void",
      "parameters": [
        {
          "name": "itemId",
          "type": "string"
        }
      ]
    }
  ],
  "properties": [
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-label` to the button group toolbar element.\nUse this to provide a unique accessible name for each button group on the page."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "dropdownExpandToViewport",
      "type": "boolean",
      "optional": true,
      "description": "Use this property to determine dropdown placement strategy for all menu dropdown items.\n\nBy default, the dropdown height is constrained to fit inside the height of its next scrollable container element.\nEnabling this property will allow the dropdown to extend beyond that container by using fixed positioning and\n[React Portals](https://reactjs.org/docs/portals.html).\n\nSet this property if the dropdown would otherwise be constrained by a scrollable container,\nfor example inside table and split view layouts.\n\nWe recommend you use discretion, and don't enable this property unless necessary\nbecause fixed positioning results in a slight, visible lag when scrolling complex pages.",
      "defaultValue": "false"
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "items",
      "type": "ReadonlyArray<ButtonGroupProps.ItemOrGroup>",
      "optional": false,
      "description": "Array of objects with a number of supported types.\n\n### icon-button\n\n* `id` (string) - The unique identifier of the button, used as detail in `onItemClick` handler and to focus the button using `ref.focus(id)`.\n* `text` (string) - The name shown as a tooltip for this button.\n* `disabled` (optional, boolean) - The disabled state indication for this button.\n* `disabledReason` (optional, boolean) - Provides a reason why the button is disabled (only when `disabled` is `true`). If provided, the button becomes focusable.\n* `loading` (optional, boolean) - The loading state indication for this button.\n* `loadingText` (optional, string) - The loading text announced to screen readers.\n* `iconName` (optional, string) - Specifies the name of the icon, used with the [icon component](/components/icon/).\n* `iconAlt` (optional, string) - Specifies alternate text for the icon when using `iconUrl`.\n* `iconUrl` (optional, string) - Specifies the URL of a custom icon.\n* `iconSvg` (optional, ReactNode) - Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n* `popoverFeedback` (optional, ReactNode) - Text that appears when the user clicks the button. Use to provide feedback to the user.\n\n### icon-toggle-button\n\n* `id` (string) - The unique identifier of the button, used as detail in `onItemClick` handler and to focus the button using `ref.focus(id)`.\n* `pressed` (boolean) - The toggle button pressed state.\n* `text` (string) - The name shown as a tooltip for this button.\n* `disabled` (optional, boolean) - The disabled state indication for this button.\n* `disabledReason` (optional, boolean) - Provides a reason why the button is disabled (only when `disabled` is `true`). If provided, the button becomes focusable.\n* `loading` (optional, boolean) - The loading state indication for this button.\n* `loadingText` (optional, string) - The loading text announced to screen readers.\n* `iconName` (optional, string) - Specifies the name of the icon, used with the [icon component](/components/icon/).\n* `iconUrl` (optional, string) - Specifies the URL of a custom icon.\n* `iconSvg` (optional, ReactNode) - Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n* `pressedIconName` (optional, string) - Specifies the name of the icon in pressed state, used with the [icon component](/components/icon/).\n* `pressedIconUrl` (optional, string) - Specifies the URL of a custom icon in pressed state.\n* `pressedIconSvg` (optional, ReactNode) - Custom SVG icon in pressed state. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n* `popoverFeedback` (optional, ReactNode) - Text that appears when the user clicks the button. Use to provide feedback to the user.\n* `pressedPopoverFeedback` (optional, ReactNode) - Text that appears when the user clicks the button in pressed state. Defaults to `popoverFeedback`.\n\n* ### file-input\n\n* `id` (string) - The unique identifier of the button, used as detail in `onFilesChange`.\n* `text` (string) - The name of the menu button shown as a tooltip.\n* `accept` (optional, string) - Specifies the native file input `accept` attribute to describe the allow-list of file types.\n* `multiple` (optional, string) - Specifies the native file input `multiple` attribute to allow users entering more than one file.\n\n### menu-dropdown\n\n* `id` (string) - The unique identifier of the button, used as detail in `onItemClick`.\n* `text` (string) - The name of the menu button shown as a tooltip.\n* `disabled` (optional, boolean) - The disabled state indication for the menu button.\n* `disabledReason` (optional, boolean) - Provides a reason why the button is disabled (only when `disabled` is `true`). If provided, the button becomes focusable.\n* `loading` (optional, boolean) - The loading state indication for the menu button.\n* `loadingText` (optional, string) - The loading text announced to screen readers.\n* `items` (ButtonDropdownProps.ItemOrGroup[]) - The array of dropdown items that belong to this menu.\n\n### group\n\n* `text` (string) - The name of the group rendered as ARIA label for this group.\n* `items` ((ButtonGroupProps.IconButton | ButtonGroupProps.MenuDropdown)[]) - The array of items that belong to this group."
    },
    {
      "name": "variant",
      "type": "\"icon\"",
      "optional": false,
      "description": "Determines the general styling of the button dropdown.\n* `icon` for icon buttons."
    }
  ],
  "events": [
    {
      "name": "onFilesChange",
      "description": "Called when the user uploads files. The event detail object contains the id and files from the file input item.",
      "cancelable": false,
      "detailType": "ButtonGroupProps.FilesChangeDetails",
      "detailInlineType": {
        "name": "ButtonGroupProps.FilesChangeDetails",
        "type": "object",
        "properties": [
          {
            "name": "files",
            "type": "Array<File>",
            "optional": false
          },
          {
            "name": "id",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onItemClick",
      "description": "Called when the user clicks on an item, and the item is not disabled. The event detail object contains the id of the clicked item.",
      "cancelable": false,
      "detailType": "ButtonGroupProps.ItemClickDetails",
      "detailInlineType": {
        "name": "ButtonGroupProps.ItemClickDetails",
        "type": "object",
        "properties": [
          {
            "name": "checked",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "id",
            "type": "string",
            "optional": false
          },
          {
            "name": "pressed",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "button-group",
    "source": "button-group.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/button-group.js"
  }
}