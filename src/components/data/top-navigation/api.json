{
  "name": "TopNavigation",
  "dashCaseName": "top-navigation",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "search",
      "description": "Use with an input or autosuggest control for a global search query.",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "i18nStrings",
      "type": "TopNavigationProps.I18nStrings",
      "inlineType": {
        "name": "TopNavigationProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "overflowMenuBackIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "overflowMenuDismissIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "overflowMenuTitleText",
            "type": "string",
            "optional": true
          },
          {
            "name": "overflowMenuTriggerText",
            "type": "string",
            "optional": true
          },
          {
            "name": "searchDismissIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "searchIconAriaLabel",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "identity",
      "type": "TopNavigationProps.Identity",
      "inlineType": {
        "name": "TopNavigationProps.Identity",
        "type": "object",
        "properties": [
          {
            "name": "href",
            "type": "string",
            "optional": false
          },
          {
            "name": "logo",
            "type": "TopNavigationProps.Logo",
            "optional": true
          },
          {
            "name": "onFollow",
            "type": "CancelableEventHandler<{}>",
            "optional": true
          },
          {
            "name": "title",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": false,
      "description": "Properties describing the product identity. They are as follows:\n\n* `title` (string) - Specifies the title text.\n* `logo` ({ src: string, alt: string }) - Specifies the logo for the product. Use fixed width and height for SVG images to ensure proper rendering.\n* `href` (string) - Specifies the `href` that the header links to.\n* `onFollow` (() => void) - Specifies the event handler called when the identity is clicked without any modifier keys."
    },
    {
      "name": "utilities",
      "type": "ReadonlyArray<TopNavigationProps.Utility>",
      "optional": true,
      "description": "A list of utility navigation elements.\nThe supported utility types are: `button` and `menu-dropdown`.\n\nThe following properties are supported across all utility types:\n\n* `type` (string) - The type of the utility. Can be `button` or `menu-dropdown`.\n* `text` (string) - Specifies the text shown in the top navigation or the title inside the dropdown if no explicit `title` property is set.\n* `title` (string) - The title displayed inside the dropdown.\n* `iconName` (string) - The name of an existing icon to display next to the utility.\n* `iconUrl` (string) - Specifies the URL of a custom icon. Use this property if the icon you want isn't available.\n* `iconAlt` (string) - Specifies alternate text for a custom icon provided using `iconUrl`. We recommend that you provide this for accessibility.\n* `iconSvg` (string) - Specifies the SVG of a custom icon.\n* `ariaLabel` (string) - Adds `aria-label` to the button or dropdown trigger. This is recommended for accessibility if a text is not provided.\n* `badge` (boolean) - Adds a badge to the corner of the icon to indicate a state change. For example: Unread notifications.\n* `disableTextCollapse` (boolean) - Prevents the utility text from being hidden on smaller screens.\n* `disableUtilityCollapse` (boolean) - Prevents the utility from being moved to an overflow menu on smaller screens.\n\n### button\n\n* `variant` ('primary-button' | 'link') - The visual appearance of the button. The default value is 'link'.\n* `href` (string) - Specifies the `href` for a link styled as a button.\n* `target` (string) - Specifies where to open the linked URL (for example, to open in a new browser window or tab use `_blank`). This property only applies when an `href` is provided.\n* `rel` (string) - Adds a `rel` attribute to the link. By default, the component sets the `rel` attribute to \"noopener noreferrer\" when `target` is `\"_blank\"`. If the `rel` property is provided, it overrides the default behavior.\n* `external` (boolean) - Marks the link as external by adding an icon after the text. When clicked, the link opens in a new tab.\n* `externalIconAriaLabel` (string) - Adds an `aria-label` for the external icon.\n* `onClick` (() => void) - Specifies the event handler called when the utility is clicked.\n* `onFollow` (() => void) - Specifies the event handler called when the utility is clicked without pressing modifier keys, and the utility has an `href` set.\n\n### menu-dropdown\n\n* `description` (string) - The description displayed inside the dropdown.\n* `items` (ButtonDropdownProps.Items) - An array of dropdown items. This follows the same structure as the `items` property of the [button dropdown component](/components/button-dropdown), with the exception of the checkbox item type.\n* `onItemClick` (NonCancelableEventHandler<ButtonDropdownProps.ItemClickDetails>) - Specifies the event handler called when a dropdown item is selected.\n* `onItemFollow` (NonCancelableEventHandler<ButtonDropdownProps.ItemClickDetails>) - Specifies the event handler called when a dropdown item is selected without pressing modifier keys, and the item has an `href` set.\n* `expandableGroups` (boolean) - Controls expandability of the item groups.",
      "defaultValue": "[]"
    }
  ],
  "events": [],
  "_meta": {
    "component": "top-navigation",
    "source": "top-navigation.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/top-navigation.js"
  }
}