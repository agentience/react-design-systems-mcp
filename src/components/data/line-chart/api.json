{
  "name": "LineChart",
  "dashCaseName": "line-chart",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "additionalFilters",
      "description": "Additional filters that are added above the chart component.\nMake sure to update the `data` property when any of your custom filters change the data to be displayed.",
      "isDefault": false
    },
    {
      "name": "empty",
      "description": "Content that is displayed when the data passed to the component is empty.",
      "isDefault": false
    },
    {
      "name": "noMatch",
      "description": "Content that is displayed when there is no data to display due to the built-in filtering.",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "ariaDescription",
      "type": "string",
      "optional": true,
      "description": "A description of the chart that assistive technologies can use (through `aria-describedby`).\nProvide a concise summary of the data visualized in the chart."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "ARIA label that is assigned to the chart itself. It should match the visible label on the page, e.g. in the container header.\nDo not use `ariaLabel` and `ariaLabelledby` at the same time."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Sets `aria-labelledby` on the chart itself.\nIf there is a visible label for the chart on the page, e.g. in the container header, set this property to the ID of that header element.\nDo not use `ariaLabel` and `ariaLabelledby` at the same time."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "detailPopoverFooter",
      "type": "CartesianChartProps.DetailPopoverFooter<T>",
      "inlineType": {
        "name": "CartesianChartProps.DetailPopoverFooter<T>",
        "type": "function",
        "returnType": "React.ReactNode",
        "parameters": [
          {
            "name": "xValue",
            "type": "T"
          }
        ]
      },
      "optional": true,
      "description": "Additional content that is displayed at the bottom of the detail popover."
    },
    {
      "name": "detailPopoverSeriesContent",
      "type": "MixedLineBarChartProps.DetailPopoverSeriesContent<T>",
      "inlineType": {
        "name": "MixedLineBarChartProps.DetailPopoverSeriesContent<T>",
        "type": "function",
        "returnType": "MixedLineBarChartProps.DetailPopoverSeriesKeyValuePair",
        "parameters": [
          {
            "name": "data",
            "type": "MixedLineBarChartProps.DetailPopoverSeriesData<T>"
          }
        ]
      },
      "optional": true,
      "description": "A function that determines the details that are displayed in the popover for each series.\nUse this for wrapping keys or values in external links, or to display a metric breakdown by adding an additional level of nested items.\n\nThe function is called with the parameters `{ series, x, y }` representing the series, the highlighted x coordinate value and its corresponding y value respectively,\nand should return the following properties:\n* `key` (ReactNode) - Name of the series.\n* `value` (ReactNode) - Value of the series at the highlighted x coordinate.\n* `subItems` (ReadonlyArray<{ key: ReactNode; value: ReactNode }>) - (Optional) List of nested key-value pairs.\n* `expandable` (boolean) - (Optional) Determines whether the optional list of nested items provided via `subItems` is expandable. This is `false` by default."
    },
    {
      "name": "detailPopoverSize",
      "type": "string",
      "inlineType": {
        "name": "\"small\" | \"medium\" | \"large\"",
        "type": "union",
        "values": [
          "small",
          "medium",
          "large"
        ]
      },
      "optional": true,
      "description": "Determines the maximum width the detail popover will be limited to.",
      "defaultValue": "'medium'"
    },
    {
      "name": "emphasizeBaselineAxis",
      "type": "boolean",
      "optional": true,
      "description": "When set to `true`, adds a visual emphasis on the zero baseline axis.\nSee the usage guidelines for more details.",
      "defaultValue": "true"
    },
    {
      "name": "errorText",
      "type": "string",
      "optional": true,
      "description": "Text that is displayed when the chart is in error state, i.e. when `statusType` is set to `\"error\"`.",
      "i18nTag": true
    },
    {
      "name": "fitHeight",
      "type": "boolean",
      "optional": true,
      "description": "Enable this property to make the chart fit into the available height of the parent container."
    },
    {
      "name": "height",
      "type": "number",
      "optional": true,
      "description": "An optional pixel value number that fixes the height of the chart area.\nIf not set explicitly, the component will use a default height that is defined internally.\nWhen used with `fitHeight`, this property defines the minimum height of the chart area.",
      "defaultValue": "500"
    },
    {
      "name": "hideFilter",
      "type": "boolean",
      "optional": true,
      "description": "When set to `true`, the default filtering dropdown is not displayed.\nIt is still possible to render additional filters with the `additionalFilters` slot."
    },
    {
      "name": "hideLegend",
      "type": "boolean",
      "optional": true,
      "description": "When set to `true`, the legend beneath the chart is not displayed.\nIt is highly recommended to keep this set to `false`."
    },
    {
      "name": "highlightedSeries",
      "type": "NonNullable<Series>",
      "inlineType": {
        "name": "NonNullable<Series>",
        "type": "union",
        "values": [
          "Series",
          "{}"
        ]
      },
      "optional": true,
      "description": "The currently highlighted data series, usually through hovering over a series or the legend.\nA value of `null` means no series is highlighted.\n\n- If you do not set this property, series are highlighted automatically when hovering over one of the triggers (uncontrolled behavior).\n- If you explicitly set this property, you must set an `onHighlightChange` listener to update this property when a series should be highlighted (controlled behavior)."
    },
    {
      "name": "i18nStrings",
      "type": "CartesianChartProps.I18nStrings<T>",
      "inlineType": {
        "name": "CartesianChartProps.I18nStrings<T>",
        "type": "object",
        "properties": [
          {
            "name": "chartAriaRoleDescription",
            "type": "string",
            "optional": true
          },
          {
            "name": "detailPopoverDismissAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "filterLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "filterPlaceholder",
            "type": "string",
            "optional": true
          },
          {
            "name": "filterSelectedAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "legendAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "xAxisAriaRoleDescription",
            "type": "string",
            "optional": true
          },
          {
            "name": "xTickFormatter",
            "type": "CartesianChartProps.TickFormatter<T>",
            "optional": true
          },
          {
            "name": "yAxisAriaRoleDescription",
            "type": "string",
            "optional": true
          },
          {
            "name": "yTickFormatter",
            "type": "CartesianChartProps.TickFormatter<number>",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "legendTitle",
      "type": "string",
      "optional": true,
      "description": "Optional title for the legend."
    },
    {
      "name": "loadingText",
      "type": "string",
      "optional": true,
      "description": "Text that is displayed when the chart is loading, i.e. when `statusType` is set to `\"loading\"`.",
      "i18nTag": true
    },
    {
      "name": "recoveryText",
      "type": "string",
      "optional": true,
      "description": "Text for the recovery button that is displayed next to the error text.",
      "i18nTag": true
    },
    {
      "name": "series",
      "type": "ReadonlyArray<LineSeries<T>>",
      "optional": false,
      "description": "Array that represents the source of data for the displayed chart.\nEach element can represent a line series or a threshold, and can have the following properties:\n\n* `title` (string): A human-readable title for this series\n* `type` (string): Series type (`\"line\"`, or `\"threshold\"`)\n* `data` (Array): An array of data points, represented as objects with `x` and `y` properties\n* `color` (string): (Optional) A color hex value for this series. When assigned, it takes priority over the automatically assigned color\n* `valueFormatter` (Function): (Optional) A function that formats data values before rendering in the UI, For example, in the details popover.",
      "defaultValue": "[]"
    },
    {
      "name": "statusType",
      "type": "string",
      "inlineType": {
        "name": "\"error\" | \"finished\" | \"loading\"",
        "type": "union",
        "values": [
          "error",
          "finished",
          "loading"
        ]
      },
      "optional": true,
      "description": "Specifies the current status of loading data.\n* `loading`: data fetching is in progress.\n* `finished`: data has loaded successfully.\n* `error`: an error occurred during fetch. You should provide user an option to recover.",
      "defaultValue": "'finished'"
    },
    {
      "name": "visibleSeries",
      "type": "ReadonlyArray<Series>",
      "optional": true,
      "description": "An array of series objects that determines which of the data series are currently displayed, i.e. not filtered out.\n- If you do not set this property, series are shown and hidden automatically when using the default filter component (uncontrolled behavior).\n- If you explicitly set this property, you must set an `onFilterChange` listener to update this property when the visible series should change, or when one of your custom filters changes the number of visible series (controlled behavior)."
    },
    {
      "name": "xDomain",
      "type": "ReadonlyArray<T>",
      "optional": true,
      "description": "Determines the domain of the x axis, i.e. the range of values that will be visible in the chart.\nFor numerical and time-based data this is represented as an array with two values: `[minimumValue, maximumValue]`.\nFor categorical data this is represented as an array of strings that determine the categories to display.\n\nIt is recommended to set this explicitly. If not, the component will determine a domain that fits all data points.\nWhen controlling this directly, make sure to update the value based on filtering changes."
    },
    {
      "name": "xScaleType",
      "type": "string",
      "inlineType": {
        "name": "ScaleType",
        "type": "union",
        "values": [
          "linear",
          "time",
          "log",
          "categorical"
        ]
      },
      "optional": true,
      "description": "Determines the type of scale for values on the x axis.",
      "defaultValue": "'linear'"
    },
    {
      "name": "xTickFormatter",
      "type": "CartesianChartProps.TickFormatter<T>",
      "inlineType": {
        "name": "CartesianChartProps.TickFormatter<T>",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "value",
            "type": "T"
          }
        ]
      },
      "optional": true,
      "description": "Function to format the displayed label of an x axis tick."
    },
    {
      "name": "xTitle",
      "type": "string",
      "optional": true,
      "description": "The title of the x axis."
    },
    {
      "name": "yDomain",
      "type": "ReadonlyArray<number>",
      "optional": true,
      "description": "Determines the domain of the y axis, i.e. the range of values that will be visible in the chart.\nThe domain is defined by a tuple: `[minimumValue, maximumValue]`.\n\nIt is recommended to set this explicitly. If not, the component will determine a domain that fits all data points.\nWhen controlling this directly, make sure to update the value based on filtering changes."
    },
    {
      "name": "yScaleType",
      "type": "string",
      "inlineType": {
        "name": "\"linear\" | \"log\"",
        "type": "union",
        "values": [
          "linear",
          "log"
        ]
      },
      "optional": true,
      "description": "Determines the type of scale for values on the y axis.",
      "defaultValue": "'linear'"
    },
    {
      "name": "yTickFormatter",
      "type": "CartesianChartProps.TickFormatter<number>",
      "inlineType": {
        "name": "CartesianChartProps.TickFormatter<number>",
        "type": "function",
        "returnType": "string",
        "parameters": [
          {
            "name": "value",
            "type": "T"
          }
        ]
      },
      "optional": true,
      "description": "Function to format the displayed label of a y axis tick."
    },
    {
      "name": "yTitle",
      "type": "string",
      "optional": true,
      "description": "The title of the y axis."
    }
  ],
  "events": [
    {
      "name": "onFilterChange",
      "description": "Called when the values of the internal filter component changed.\nThis will **not** be called for any custom filter components you have defined in `additionalFilters`.",
      "cancelable": false,
      "detailType": "CartesianChartProps.FilterChangeDetail<Series>",
      "detailInlineType": {
        "name": "CartesianChartProps.FilterChangeDetail<Series>",
        "type": "object",
        "properties": [
          {
            "name": "visibleSeries",
            "type": "ReadonlyArray<Series>",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onHighlightChange",
      "description": "Called when the highlighted series has changed because of user interaction.",
      "cancelable": false,
      "detailType": "CartesianChartProps.HighlightChangeDetail<Series>",
      "detailInlineType": {
        "name": "CartesianChartProps.HighlightChangeDetail<Series>",
        "type": "object",
        "properties": [
          {
            "name": "highlightedSeries",
            "type": "Series | null",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onRecoveryClick",
      "description": "Called when the user clicks the recovery button that appears when there is an error state.\nUse this to enable the user to retry a failed request or provide another option for the user\nto recover from the error.",
      "cancelable": false
    }
  ],
  "_meta": {
    "component": "line-chart",
    "source": "line-chart.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/line-chart.js"
  }
}