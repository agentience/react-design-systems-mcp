{
  "name": "PropertyFilter",
  "dashCaseName": "property-filter",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "customControl",
      "description": "A slot located before the filtering input. Use it if for a Select component if your dataset supports property\nfilter queries only after an initial filter is applied.",
      "isDefault": false
    },
    {
      "name": "customFilterActions",
      "description": "A slot that replaces the standard \"Clear filter\" button.\nWhen using this slot, make sure to still provide a mechanism to clear all filters.",
      "isDefault": false
    },
    {
      "name": "filteringConstraintText",
      "description": "Constraint text that's displayed below the filtering input.\nUse this to provide additional information about supported filters.",
      "isDefault": false
    },
    {
      "name": "filteringEmpty",
      "description": "Displayed when there are no options to display.\nThis is only shown when `statusType` is set to `finished` or not set at all.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "focus",
      "description": "Sets focus on the underlying input control.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "ariaDescribedby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-describedby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for each element that you want to use as a description\nand set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`)."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-labelledby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for the element you want to use as label and set the property to that ID."
    },
    {
      "name": "asyncProperties",
      "type": "boolean",
      "optional": true,
      "description": "Set `asyncProperties` if you need to load `filteringProperties` asynchronously. This would cause extra `onLoadMore`\nevents to fire calling for more properties."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "controlId",
      "type": "string",
      "optional": true,
      "description": "Specifies the ID of the native form element. You can use it to relate\na label element's `for` attribute to this control.\n\nIt defaults to an automatically generated ID that\nis provided by its parent form field component."
    },
    {
      "name": "countText",
      "type": "string",
      "optional": true,
      "description": "Accepts a human-readable, localized string that indicates the number of results. For example, \"1 match\" or \"165 matches.\"\nIf the total number of results is unknown, also include an indication that there may be more results than\nthe number listed. For example, \"25+ matches.\"\n\nThe count text is only displayed when `query.tokens` isn't empty.\nWhen the `countText` or `query` changes, it will be announced to assistive technologies."
    },
    {
      "name": "customGroupsText",
      "type": "Array<PropertyFilterProps.GroupText>",
      "optional": true,
      "description": "An array of objects that contain localized, human-readable strings for the labels of custom groups within the filtering dropdown. Use group property to associate the strings with your custom group of options. Define the following values for each group:\n\n* properties [string]: The group label in the filtering dropdown that contains the list of properties from this group. For example: Tags.\n* values [string]: The group label in the filtering dropdown that contains the list of values from this group. For example: Tags values.\n* group [string]: The identifier of a custom group.",
      "defaultValue": "[]"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "optional": true,
      "description": "If set to `true`, the filtering input will be disabled.\nUse it, for example, if you are fetching new items upon filtering change\nin order to prevent the user from changing the filtering query."
    },
    {
      "name": "disableFreeTextFiltering",
      "type": "boolean",
      "optional": true,
      "description": "Set `disableFreeTextFiltering` only if you canâ€™t filter the dataset using a filter that is applied to every column,\ninstead of a specific property. This would stop the user from creating such tokens.",
      "defaultValue": "false"
    },
    {
      "name": "enableTokenGroups",
      "type": "boolean",
      "optional": true,
      "description": "Activates token grouping mechanism to support token nesting (up to one level).\nWhen `true`, the `query.tokens` property is ignored and `query.tokenGroups` is used instead.",
      "defaultValue": "false"
    },
    {
      "name": "expandToViewport",
      "type": "boolean",
      "optional": true,
      "description": "By default, the dropdown height is constrained to fit inside the height of its next scrollable container element.\nEnabling this property will allow the dropdown to extend beyond that container by using fixed positioning and\n[React Portals](https://reactjs.org/docs/portals.html).\n\nSet this property if the dropdown would otherwise be constrained by a scrollable container,\nfor example inside table and split view layouts.\n\nWe recommend you use discretion, and don't enable this property unless necessary\nbecause fixed positioning results in a slight, visible lag when scrolling complex pages."
    },
    {
      "name": "filteringAriaLabel",
      "type": "string",
      "optional": true,
      "description": "The label that will be passed down to the Autosuggest `ariaLabel` property.\nSee the [Autosuggest API](/components/autosuggest/?tabId=api) page for more details."
    },
    {
      "name": "filteringErrorText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display when a data fetching error occurs. Make sure that you provide `recoveryText`."
    },
    {
      "name": "filteringFinishedText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display at the bottom of the dropdown menu after pagination has reached the end."
    },
    {
      "name": "filteringLoadingText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text to display when in the loading state."
    },
    {
      "name": "filteringOptions",
      "type": "ReadonlyArray<PropertyFilterOption>",
      "optional": true,
      "description": "An array of possible values of the individual `filteringProperties`. Each element has the following properties:\n\n* `propertyKey` [string]: The key of the corresponding filtering property in the `filteringProperties` array.\n* `value` [string]: The value that will be used as a suggestion when creating or modifying a filtering token.\n* `label` [string]: Optional suggestion label to be matched instead of the value.\n\nFiltering options that require labels can only use `=` and `!=` operators. The token value must be labelled separately, for example:\n```\nconst filteringProperty = {\n  key: 'state',\n  propertyLabel: 'State',\n  operators: ['=', '!='].map(operator => ({ operator, format: getStateLabel }))\n}\nconst filteringOptions = [\n  { propertyKey: 'state', value: 'STOPPED', label: getStateLabel('STOPPED') },\n  { propertyKey: 'state', value: 'STOPPING', label: getStateLabel('STOPPING') },\n  { propertyKey: 'state', value: 'RUNNING', label: getStateLabel('RUNNING') },\n]\n```",
      "defaultValue": "[]"
    },
    {
      "name": "filteringPlaceholder",
      "type": "string",
      "optional": true,
      "description": "Placeholder for the filtering input."
    },
    {
      "name": "filteringProperties",
      "type": "ReadonlyArray<PropertyFilterProps.FilteringProperty>",
      "optional": false,
      "description": "An array of properties by which the data set can be filtered. Each element has the following properties:\n\n* groupValuesLabel [string]: Localized string to display for the 'Values' group label for a specific property.\n* key [string]: The identifier of this property.\n* propertyLabel [string]: A human-readable string for the property.\n* operators [Array]: A list of all operators supported by this property. If you omit the equals operator because your API does not support it, make sure to set `defaultOperator` to a supported operator from this list.\n* group [string]: Optional identifier of a custom group that this filtering option is assigned to. Use to create additional groups below the default one. Make sure to also define labels for the group in the customGroupsText property. Notice that only one level of options nesting is supported.\n* defaultOperator [ComparisonOperator]: Optional parameter that changes the default operator used with this filtering property. Use it only if your API does not support \"equals\" filtering terms with this property."
    },
    {
      "name": "filteringRecoveryText",
      "type": "string",
      "optional": true,
      "description": "Specifies the text for the recovery button. The text is displayed next to the error text.\nUse the `onLoadItems` event to perform a recovery action (for example, retrying the request)."
    },
    {
      "name": "filteringStatusType",
      "type": "string",
      "inlineType": {
        "name": "DropdownStatusProps.StatusType",
        "type": "union",
        "values": [
          "error",
          "finished",
          "loading",
          "pending"
        ]
      },
      "optional": true,
      "description": "Specifies the current status of loading more options.\n* `pending` - Indicates that no request in progress, but more options may be loaded.\n* `loading` - Indicates that data fetching is in progress.\n* `finished` - Indicates that pagination has finished and no more requests are expected.\n* `error` - Indicates that an error occurred during fetch. You should use `recoveryText` to enable the user to recover."
    },
    {
      "name": "freeTextFiltering",
      "type": "PropertyFilterFreeTextFiltering",
      "inlineType": {
        "name": "PropertyFilterFreeTextFiltering",
        "type": "object",
        "properties": [
          {
            "name": "defaultOperator",
            "type": "string",
            "optional": true
          },
          {
            "name": "operators",
            "type": "ReadonlyArray<string>",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object configuring the operators for free text filtering, which has the following properties:\n\n* operators [Array]: A list of all operators supported for free text filtering. If you omit the contains operator because your API does not support it, make sure to set `defaultOperator` to a supported operator from this list.\n* defaultOperator [ComparisonOperator]: An optional parameter that changes the default operator used for free text filtering. Use this parameter only if your API does not support \"contains\" free test filtering terms."
    },
    {
      "name": "hideOperations",
      "type": "boolean",
      "optional": true,
      "description": "If hideOperations it set, the indicator of the operation (that is, `and` or `or`) and the selection of operations\n(applied to the property and value token) are hidden from the user. Only use when you have a custom\nfiltering logic which combines tokens in different way than the default one. When used, ensure that\noperations are communicated to the user in another way, or use `readOnlyOperations`.\n\nThis property cannot be set when `enableTokenGroups=true`.",
      "defaultValue": "false"
    },
    {
      "name": "i18nStrings",
      "type": "PropertyFilterProps.I18nStrings",
      "inlineType": {
        "name": "PropertyFilterProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "allPropertiesLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "applyActionText",
            "type": "string",
            "optional": true
          },
          {
            "name": "cancelActionText",
            "type": "string",
            "optional": true
          },
          {
            "name": "clearAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "clearFiltersText",
            "type": "string",
            "optional": true
          },
          {
            "name": "dismissAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "editTokenHeader",
            "type": "string",
            "optional": true
          },
          {
            "name": "enteredTextLabel",
            "type": "AutosuggestProps.EnteredTextLabel",
            "optional": true
          },
          {
            "name": "filteringAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "filteringPlaceholder",
            "type": "string",
            "optional": true
          },
          {
            "name": "formatToken",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "groupEditAriaLabel",
            "type": "((group: PropertyFilterProps.FormattedTokenGroup) => string)",
            "optional": true
          },
          {
            "name": "groupPropertiesText",
            "type": "string",
            "optional": true
          },
          {
            "name": "groupValuesText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operationAndText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operationOrText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorContainsText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorDoesNotContainText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorDoesNotEqualText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorDoesNotStartWithText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorEqualsText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorGreaterOrEqualText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorGreaterText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorLessOrEqualText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorLessText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorStartsWithText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorsText",
            "type": "string",
            "optional": true
          },
          {
            "name": "operatorText",
            "type": "string",
            "optional": true
          },
          {
            "name": "propertyText",
            "type": "string",
            "optional": true
          },
          {
            "name": "removeTokenButtonAriaLabel",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "tokenEditorAddExistingTokenAriaLabel",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "tokenEditorAddExistingTokenLabel",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "tokenEditorAddNewTokenLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenEditorAddTokenActionsAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenEditorTokenActionsAriaLabel",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "tokenEditorTokenRemoveAriaLabel",
            "type": "((token: PropertyFilterProps.FormattedToken) => string)",
            "optional": true
          },
          {
            "name": "tokenEditorTokenRemoveFromGroupLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenEditorTokenRemoveLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenLimitShowFewer",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenLimitShowMore",
            "type": "string",
            "optional": true
          },
          {
            "name": "tokenOperatorAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "valueText",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "loading",
      "type": "boolean",
      "optional": true,
      "description": "Set to `true` while the related collection is loading (e.g. during an async filtering action).\nIf set to `true`, the live announcement of countText by assistive technologies will be paused until it changes back to `false`."
    },
    {
      "name": "query",
      "type": "PropertyFilterQuery",
      "inlineType": {
        "name": "PropertyFilterQuery",
        "type": "object",
        "properties": [
          {
            "name": "operation",
            "type": "PropertyFilterOperation",
            "optional": false
          },
          {
            "name": "tokenGroups",
            "type": "ReadonlyArray<PropertyFilterToken | PropertyFilterTokenGroup>",
            "optional": true
          },
          {
            "name": "tokens",
            "type": "ReadonlyArray<PropertyFilterToken>",
            "optional": false
          }
        ]
      },
      "optional": false,
      "description": "An object representing the current query displayed in the property filter, which has three properties: `operation`, `tokens`, and `tokenGroups`.\nThe `operation` property has two valid values: \"and\", \"or\", and controls the join operation to be applied between tokens when filtering the items.\nThe `tokens` property is an array of objects that will be displayed to the user beneath the filtering input. When `enableTokenGroups=true`, the\n`tokenGroups` property is used instead, which supports nested tokens.\n\nEach token has the following properties:\n* value [unknown]: The value of the token to be used as a filter. Can be null or string for default tokens, string[] for enum tokens, and anything for tokens with custom forms.\n* propertyKey [string]: The key of the corresponding property in filteringProperties.\n* operator ['<' | '<=' | '>' | '>=' | ':' | '!:' | '=' | '!=' | '^' | '!^']: The operator which indicates how to filter the dataset using this token."
    },
    {
      "name": "readOnlyOperations",
      "type": "boolean",
      "optional": true,
      "description": "If readOnlyOperations it set, the indicator of the operation (that is, `and` or `or`) is shown, but the\noperation cannot be changed. This is also supported for nested tokens when `enableTokenGroups=true`.",
      "defaultValue": "false"
    },
    {
      "name": "tokenLimit",
      "type": "number",
      "optional": true,
      "description": "Specifies the maximum number of displayed tokens. If the property isn't set, all of the tokens are displayed."
    },
    {
      "name": "tokenLimitShowFewerAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an aria-label to the \"Show fewer\" button for the token group control.\nUse to assign unique labels when there are multiple token groups with the same `tokenLimitShowFewer` label on one page."
    },
    {
      "name": "tokenLimitShowMoreAriaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an aria-label to the \"Show more\" button for the token group control.\nUse to assign unique labels when there are multiple token groups with the same `tokenLimitShowMore` label on one page."
    },
    {
      "name": "virtualScroll",
      "type": "boolean",
      "optional": true,
      "description": "If you have more than 500 `filteringOptions`, enable this flag to apply a performance optimization that makes\nthe filtering experience smoother. We don't recommend enabling the feature if you have less than 500 options,\nbecause the improvements to performance are offset by a visible scrolling lag. When you set this flag to true,\nit removes options that are not currently in view from the DOM."
    }
  ],
  "events": [
    {
      "name": "onChange",
      "description": "Fired when the `query` gets changed. Filter the dataset in response to this event using the values in the `detail` object.",
      "cancelable": false,
      "detailType": "PropertyFilterQuery",
      "detailInlineType": {
        "name": "PropertyFilterQuery",
        "type": "object",
        "properties": [
          {
            "name": "operation",
            "type": "PropertyFilterOperation",
            "optional": false
          },
          {
            "name": "tokenGroups",
            "type": "ReadonlyArray<PropertyFilterToken | PropertyFilterTokenGroup>",
            "optional": true
          },
          {
            "name": "tokens",
            "type": "ReadonlyArray<PropertyFilterToken>",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onLoadItems",
      "description": "Use this event to asynchronously load filteringOptions, component currently needs.  The detail object contains following properties:\n\n* `filteringProperty` - The property for which you need to fetch the options.\n* `filteringOperator` - The operator for which you need to fetch the options.\n* `filteringText` - The value that you need to use to fetch options.\n* `firstPage` - Indicates that you should fetch the first page of options for a `filteringProperty` that match the `filteringText`.\n* `samePage` - Indicates that you should fetch the same page that you have previously fetched (for example, when the user clicks on the recovery button).",
      "cancelable": false,
      "detailType": "PropertyFilterProps.LoadItemsDetail",
      "detailInlineType": {
        "name": "PropertyFilterProps.LoadItemsDetail",
        "type": "object",
        "properties": [
          {
            "name": "filteringOperator",
            "type": "string",
            "optional": true
          },
          {
            "name": "filteringProperty",
            "type": "PropertyFilterProps.FilteringProperty",
            "optional": true
          },
          {
            "name": "filteringText",
            "type": "string",
            "optional": false
          },
          {
            "name": "firstPage",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "samePage",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "property-filter",
    "source": "property-filter.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/property-filter.js"
  }
}