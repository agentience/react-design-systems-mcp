{
  "name": "Container",
  "dashCaseName": "container",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "children",
      "description": "Main content of the container.",
      "isDefault": true
    },
    {
      "name": "footer",
      "description": "Footer of the container.",
      "isDefault": false
    },
    {
      "name": "header",
      "description": "Heading element of the container. Use the [header component](/components/header/).",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "analyticsMetadata",
      "type": "ContainerProps.AnalyticsMetadata",
      "inlineType": {
        "name": "ContainerProps.AnalyticsMetadata",
        "type": "object",
        "properties": [
          {
            "name": "instanceIdentifier",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Specifies additional analytics-related metadata.\n* `instanceIdentifier` - A unique string that identifies this component instance in your application.",
      "analyticsTag": ""
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "disableContentPaddings",
      "type": "boolean",
      "optional": true,
      "description": "Determines whether the container content has padding. If `true`, removes the default padding from the content area.",
      "defaultValue": "false"
    },
    {
      "name": "disableHeaderPaddings",
      "type": "boolean",
      "optional": true,
      "description": "Determines whether the container header has padding. If `true`, removes the default padding from the header.",
      "defaultValue": "false"
    },
    {
      "name": "fitHeight",
      "type": "boolean",
      "optional": true,
      "description": "Enabling this property will make the container to fit into available height. If content is too short, the container\nwill stretch, if too long, the container will shrink and show vertical scrollbar.\n\nUse this property to align heights of multiple containers displayed in a single row. It is recommended to stretch\nall containers to the height of the longest one, to avoid extra vertical scroll areas.",
      "defaultValue": "false"
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "media",
      "type": "ContainerProps.Media",
      "inlineType": {
        "name": "ContainerProps.Media",
        "type": "object",
        "properties": [
          {
            "name": "content",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "height",
            "type": "string | number",
            "optional": true
          },
          {
            "name": "position",
            "type": "\"top\" | \"side\"",
            "optional": true
          },
          {
            "name": "width",
            "type": "string | number",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "\nUse this slot to render a media element. Supported element types are 'img', 'video', and 'picture'.\nYou can define different positions and sizes for the media element within the container.\n\n* `content` - Use this slot to render your media element. We support `img`, `video`, `picture`, and `iframe` elements.\n\n* `position` - Defines the media slot's position within the container. Defaults to `top`.\n\n* `width` - Defines the width of the media slot when positioned on the side. Corresponds to the `width` CSS-property.\nWhen this value is set, media elements larger than the defined width may be cropped, with 'object-fit: cover' centering it.\nNote: This value is considered only when `position` is set to `side`.\nIf no width is provided, the media slot will take a maximum of 66% of the container's width.\n\n* `height` - Defines the height of the media slot when position on the top. Corresponds to the `height` CSS-property.\nWhen this value is set, media elements larger than the defined width may be cropped, with 'object-fit: cover' centering it.   * Note: This value is only considered if `position` is set to `top`.\nIf no height is provided, the media slot will be displayed at its full height."
    },
    {
      "name": "variant",
      "type": "string",
      "inlineType": {
        "name": "\"default\" | \"stacked\"",
        "type": "union",
        "values": [
          "default",
          "stacked"
        ]
      },
      "optional": true,
      "description": "Specify a container variant with one of the following:\n* `default` - Use this variant in standalone context.\n* `stacked` - Use this variant adjacent to other stacked containers (such as a container,\n              table).",
      "defaultValue": "'default'",
      "visualRefreshTag": "`stacked` variant"
    }
  ],
  "events": [],
  "_meta": {
    "component": "container",
    "source": "container.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/container.js"
  }
}