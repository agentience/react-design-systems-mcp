{
  "name": "Checkbox",
  "dashCaseName": "checkbox",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "children",
      "displayName": "label",
      "description": "The control's label that's displayed next to the checkbox. A state change occurs when a user clicks on it.",
      "isDefault": true
    },
    {
      "name": "description",
      "description": "Description that appears below the label.",
      "isDefault": false
    }
  ],
  "functions": [
    {
      "name": "focus",
      "description": "Sets input focus onto the UI control.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "ariaControls",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-controls` attribute to the component.\nIf the component controls any secondary content (for example, another form field), use this to provide an ID referring to the secondary content."
    },
    {
      "name": "ariaDescribedby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-describedby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for each element that you want to use as a description\nand set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`)."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Adds an `aria-label` to the native control.\n\nUse this if you don't have a visible label for this control."
    },
    {
      "name": "ariaLabelledby",
      "type": "string",
      "optional": true,
      "description": "Adds `aria-labelledby` to the component. If you're using this component within a form field,\ndon't set this property because the form field component automatically sets it.\n\nUse this property if the component isn't surrounded by a form field, or you want to override the value\nautomatically set by the form field (for example, if you have two components within a single form field).\n\nTo use it correctly, define an ID for the element you want to use as label and set the property to that ID."
    },
    {
      "name": "ariaRequired",
      "type": "boolean",
      "optional": true,
      "description": "Specifies whether to add `aria-required` to the native control."
    },
    {
      "name": "checked",
      "type": "boolean",
      "optional": false,
      "description": "Specifies if the component is selected."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "controlId",
      "type": "string",
      "optional": true,
      "description": "Specifies the ID of the native form element. By default, it uses an automatically generated ID."
    },
    {
      "name": "disabled",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the control is disabled, which prevents the\nuser from modifying the value and prevents the value from\nbeing included in a form submission. A disabled control can't\nreceive focus."
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "indeterminate",
      "type": "boolean",
      "optional": true,
      "description": "Specifies that the component is in an indeterminate state. The behavior of this property replicates\nthe behavior of [the respective property](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes)\nin the native control."
    },
    {
      "name": "name",
      "type": "string",
      "optional": true,
      "description": "Specifies the name of the control used in HTML forms."
    },
    {
      "name": "readOnly",
      "type": "boolean",
      "optional": true,
      "description": "Specifies if the control is read-only, which prevents the\nuser from modifying the value. Should be used only inside forms.\nA read-only control is still focusable.\nIf both `readOnly` and `disabled` are set, `disabled` takes precedence."
    }
  ],
  "events": [
    {
      "name": "onBlur",
      "description": "Called when input focus is removed from the UI control.",
      "cancelable": false
    },
    {
      "name": "onChange",
      "description": "Called when the user changes the component state. The event `detail` contains the current value for the `checked` property.",
      "cancelable": false,
      "detailType": "CheckboxProps.ChangeDetail",
      "detailInlineType": {
        "name": "CheckboxProps.ChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "checked",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "indeterminate",
            "type": "false",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onFocus",
      "description": "Called when input focus is moved to the UI control.",
      "cancelable": false
    }
  ],
  "_meta": {
    "component": "checkbox",
    "source": "checkbox.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/checkbox.js"
  }
}