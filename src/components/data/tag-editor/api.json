{
  "name": "TagEditor",
  "dashCaseName": "tag-editor",
  "releaseStatus": "stable",
  "regions": [],
  "functions": [
    {
      "name": "focus",
      "description": "Focuses the first error within the component.\nIf no error is present, no element is focused.",
      "returnType": "void",
      "parameters": []
    }
  ],
  "properties": [
    {
      "name": "allowedCharacterPattern",
      "type": "string",
      "optional": true,
      "description": "Specifies a regular expression string that overrides the default acceptable\ncharacter validation. You should use this property only when absolutely necessary."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "Adds the specified classes to the root element of the component.",
      "deprecatedTag": "Custom CSS is not supported. For testing and other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)."
    },
    {
      "name": "i18nStrings",
      "type": "TagEditorProps.I18nStrings",
      "inlineType": {
        "name": "TagEditorProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "addButton",
            "type": "string",
            "optional": true
          },
          {
            "name": "awsPrefixError",
            "type": "string",
            "optional": true
          },
          {
            "name": "clearAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "duplicateKeyError",
            "type": "string",
            "optional": true
          },
          {
            "name": "emptyKeyError",
            "type": "string",
            "optional": true
          },
          {
            "name": "emptyTags",
            "type": "string",
            "optional": true
          },
          {
            "name": "enteredKeyLabel",
            "type": "((enteredText: string) => string)",
            "optional": true
          },
          {
            "name": "enteredValueLabel",
            "type": "((enteredText: string) => string)",
            "optional": true
          },
          {
            "name": "errorIconAriaLabel",
            "type": "string",
            "optional": true
          },
          {
            "name": "invalidKeyError",
            "type": "string",
            "optional": true
          },
          {
            "name": "invalidValueError",
            "type": "string",
            "optional": true
          },
          {
            "name": "itemRemovedAriaLive",
            "type": "string",
            "optional": true
          },
          {
            "name": "keyHeader",
            "type": "string",
            "optional": true
          },
          {
            "name": "keyPlaceholder",
            "type": "string",
            "optional": true
          },
          {
            "name": "keysSuggestionError",
            "type": "string",
            "optional": true
          },
          {
            "name": "keysSuggestionLoading",
            "type": "string",
            "optional": true
          },
          {
            "name": "keySuggestion",
            "type": "string",
            "optional": true
          },
          {
            "name": "loading",
            "type": "string",
            "optional": true
          },
          {
            "name": "maxKeyCharLengthError",
            "type": "string",
            "optional": true
          },
          {
            "name": "maxValueCharLengthError",
            "type": "string",
            "optional": true
          },
          {
            "name": "optional",
            "type": "string",
            "optional": true
          },
          {
            "name": "removeButton",
            "type": "string",
            "optional": true
          },
          {
            "name": "removeButtonAriaLabel",
            "type": "((item: TagEditorProps.Tag) => string)",
            "optional": true
          },
          {
            "name": "tagLimit",
            "type": "((availableTags: number, tagLimit: number) => string)",
            "optional": true
          },
          {
            "name": "tagLimitExceeded",
            "type": "((tagLimit: number) => string)",
            "optional": true
          },
          {
            "name": "tagLimitReached",
            "type": "((tagLimit: number) => string)",
            "optional": true
          },
          {
            "name": "tooManyKeysSuggestion",
            "type": "string",
            "optional": true
          },
          {
            "name": "tooManyValuesSuggestion",
            "type": "string",
            "optional": true
          },
          {
            "name": "undoButton",
            "type": "string",
            "optional": true
          },
          {
            "name": "undoPrompt",
            "type": "string",
            "optional": true
          },
          {
            "name": "valueHeader",
            "type": "string",
            "optional": true
          },
          {
            "name": "valuePlaceholder",
            "type": "string",
            "optional": true
          },
          {
            "name": "valuesSuggestionError",
            "type": "string",
            "optional": true
          },
          {
            "name": "valuesSuggestionLoading",
            "type": "string",
            "optional": true
          },
          {
            "name": "valueSuggestion",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "An object containing all the necessary localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "id",
      "type": "string",
      "optional": true,
      "description": "Adds the specified ID to the root element of the component.",
      "deprecatedTag": "The usage of the `id` attribute is reserved for internal use cases. For testing and other use cases,\nuse [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes). If you must\nuse the `id` attribute, consider setting it on a parent element instead."
    },
    {
      "name": "keysRequest",
      "type": "((key: string) => Promise<ReadonlyArray<string>>)",
      "inlineType": {
        "name": "(key: string) => Promise<ReadonlyArray<string>>",
        "type": "function",
        "returnType": "Promise<ReadonlyArray<string>>",
        "parameters": [
          {
            "name": "key",
            "type": "string"
          }
        ]
      },
      "optional": true,
      "description": "Specifies a function that returns all the keys for a resource.\nThe expected return type of the function should be a promise that\nresolves to a list of strings of all the keys (for example, `['key1', 'key2']`)."
    },
    {
      "name": "loading",
      "type": "boolean",
      "optional": true,
      "description": "Renders the component in a loading state.",
      "defaultValue": "false"
    },
    {
      "name": "tagLimit",
      "type": "number",
      "optional": true,
      "description": "Specifies the maximum number of tags that a customer can add.",
      "defaultValue": "50"
    },
    {
      "name": "tags",
      "type": "ReadonlyArray<TagEditorProps.Tag>",
      "optional": true,
      "description": "Specifies an array of tags that are displayed to the user. Each tag item has the following properties:\n- `key` (string) - The key of the tag that's displayed in the corresponding key field.\n- `value` (string) - The value of the tag that's displayed in the corresponding value field.\n- `existing` (boolean) - Specifies if this is an existing tag for the resource.\n     When set to `true`, if the tag is deleted its `markedForRemoval` property is to `true`.\n     When set to `false`, deletion of the tag removes the tag from the `tags` list.\n- `markedForRemoval` (boolean) - Specifies if this tag has been marked for removal.\n     This property is set to `true` by the component when a user removes an existing tag.\n     The item will remain in the `tags` list. When set to `true`, the user is presented with the option to undo the removal operation.\n- `valueSuggestionOptions` (Array<AutosuggestProps.Option>) - An array of autosuggest suggestion options associated with the specified tag key.",
      "defaultValue": "[]"
    },
    {
      "name": "valuesRequest",
      "type": "((key: string, value: string) => Promise<ReadonlyArray<string>>)",
      "inlineType": {
        "name": "(key: string, value: string) => Promise<ReadonlyArray<string>>",
        "type": "function",
        "returnType": "Promise<ReadonlyArray<string>>",
        "parameters": [
          {
            "name": "key",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      },
      "optional": true,
      "description": "Specifies a function that returns all the values for a specified key\nof a resource. The expected return type of the function should be a promise\nthat resolves to a list of strings of all the values (for example, `['value1', 'value2']`).\n\nYou should return a rejected promise when the `key` parameter is an empty string."
    }
  ],
  "events": [
    {
      "name": "onChange",
      "description": "Called when any tag operation occurs.\nThe event `detail` object contains the full updated state of `tags`,\nand whether the component is in a `valid` state.",
      "cancelable": false,
      "detailType": "TagEditorProps.ChangeDetail",
      "detailInlineType": {
        "name": "TagEditorProps.ChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "tags",
            "type": "ReadonlyArray<TagEditorProps.Tag>",
            "optional": false
          },
          {
            "name": "valid",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    }
  ],
  "_meta": {
    "component": "tag-editor",
    "source": "tag-editor.js",
    "extracted_at": "/Users/troymolander/Development/cloudscape-design/components/lib/components-definitions/components/tag-editor.js"
  }
}